package com.oceantechrus.max.logicapp;

import android.Manifest;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.wifi.WifiManager;
import androidx.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import androidx.core.app.ActivityCompat;
import androidx.core.app.FragmentTransaction;
import androidx.core.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.format.DateFormat;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.DatePicker;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TimePicker;
import android.widget.Toast;

import com.nbsp.materialfilepicker.MaterialFilePicker;
import com.nbsp.materialfilepicker.ui.FilePickerActivity;
import com.zgkxzx.modbus4And.requset.ModbusParam;
import com.zgkxzx.modbus4And.requset.ModbusReq;
import com.zgkxzx.modbus4And.requset.OnRequestBack;

import org.apache.http.util.EncodingUtils;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;


public class SetpointsActivity extends AppCompatActivity implements View.OnClickListener,
                                                                    SetParamDialog.SetParamDialogListener,
                                                                    AlarmResetDialog.AlarmResetDialogListener,
                                                                    AOutputParamDialog.AOutputParamDialogListener,
                                                                    DInputParamDialog.DInputParamDialogListener,
                                                                    DOutputParamDialog.DOutputParamDialogListener,
                                                                    UInputParamDialog.UInputParamDialogListener,
                                                                    TimePickerDialog.OnTimeSetListener,
                                                                    DatePickerDialog.OnDateSetListener,
                                                                    SetTimeProgramDialog.SetTimeProgramDialogListener,
                                                                    SetSystemNameDialog.SetSystemNameDialogListener,
                                                                    SetWeekdayDialog.SetWeekdayDialogListener,
                                                                    ContactDeleteDialog.ContactDeleteDialogListener,
                                                                    ContactAddDialog.ContactAddDialogListener,
                                                                    JornalDeleteDialog.JornalDeleteDialogListener{

    private String[] wd_rus = {
            "  ",
            "Пн",
            "Вт",
            "Ср",
            "Чт",
            "Пт",
            "Сб",
            "Вс"
    };


    static int timeout = 3000;//3000;
    static int delay = 50;
    static int period = 4000;//4000;


    // названия аналоговых входов
    private String[] ui_names = {
            "Резерв",                                       // 0
            "Температура наружного воздуха",                // 1
            "Температура приточного воздуха",               // 2
            "Температура горячих газов",                    // 3
            "Температура холодных газов",                   // 4
            "Температура вытяжного воздуха",                // 5
            "Температура обратной воды",                    // 6
            "Температуратеплообменника на вытяжке",         // 7
            "Температура теплообменника на притоке",        // 8
            "Скорость 1",                                   // 9
            "Скорость 2",                                   // 10
            "Контроль питания",                             // 11
            "Датчик пожара",                                // 12
            "Кнопка Пуск",                                  // 13
            "Кнопка Стоп",                                  // 14
            "Температура ТЭН",                              // 15
            "Температура ТЭН оттайки",                      // 16
            "Температура горячих газов 2",                  // 17
            "Температура холодных газов 2",                 // 18
            "Температура воздуха в помещении",              // 19
            "Датчик перегрева ТЭН (термостат)",             // 20
            "Температура воздуха после испарителя",         // 21
            "Дифманометр",                                  // 22
            "Сигнал \"Оттайка\"",                           // 23
            "Влажность наружного воздуха",                  // 24
            "Влажность приточного воздуха",                 // 25
            "Влажность вытяжного воздуха",                  // 26
            "Влажность воздуха в помещении",                // 27
            "Температура приточного воздуха 2",             // 28
            "Контроль состояния приточного резервного вентилятора", // 29
            "Контроль состояния вытяжного резервного вентилятора",  // 30
            "Контроль состояния охладителя",                // 31
            "Контроль состояния вытяжного вентилятора В2",  // 32
            "Контроль состояния вытяжного вентилятора В3",  // 33
            "Температура воды подачи",                      // 34
            "Контроль состояния компрессора 1",             // 35
            "Контроль состояния компрессора 2",             // 36
            "Гигрометр",                                    // 37
            "Температура воды",                             // 38
            "Температура контура ГВС",                      // 39
            "Температура контура вентиляции",               // 40
            "Температура контура отопления",                // 41
            "Температура обратной воды контура отопления",  // 42
            "Температура обратной воды сети",               // 43
            "Температура воздуха после увлажнителя",        // 44
            "Контроль состояния компрессоров",              // 45
            "Температура воздуха в камере смешения",        // 46
            "Температура компрессора",                      // 47
            "Температура воздуха после рекуператора",       // 48
            "Температура 1",                                // 49
            "Влажность 1",                                  // 50
            "Температура 2",                                // 51
            "Влажность 2",                                  // 52
            "Температура 3",                                // 53
            "Влажность 3",                                  // 54
            "Температура 4",                                // 55
            "Влажность 4",                                  // 56
            "Температура контура ТП1",                      // 57
            "Температура контура ТП2",                      // 58
            "Температура контура ТП3",                      // 59
            "Температура контура Отопления 1",              // 60
            "Температура контура Отопления 2",              // 61
            "Температура 1",                                // 62
            "Температура 2",                                // 63
            "Температура 3",                                // 64
            "Датчик загрязнения фильтра 1",                 // 65
            "Датчик загрязнения фильтра 2",                 // 66
            "Температура контура отопления 1 и 2 этаж",     // 67
            "Режим Ручной/Автомат",                         // 68
            "Температура обратной воды контура 1",          // 69
            "Температура обратной воды контура 2",          // 70
            "Температура обратной воды контура 3",          // 71
            "Температура входящей воды",                    // 72
            "Температура выходящей воды",                   // 73
            "Датчик высокого давления",                     // 74
            "Датчик низкого давления",                      // 75
            "Кнопка включения завесы 1",                    // 76
            "Кнопка включения завесы 2",                    // 77
            "Кнопка включения завесы 3",                    // 78
            "Кнопка включения завесы 4",                    // 79
            "Контроль сост.вент-ра В4",                     // 80
            "Контроль сост.вент-ра В5",                     // 81
            "Контроль сост.вент-ра В6",                     // 82
            "Контроль сост.вент-ра В7",                     // 83
            "Контроль сост.вент-ра В8",                     // 84
            "Контроль сост.вент-ра В9",                     // 85
            "Температура воздуха после калорифера 1",       // 86
            "t обратной воды 1",                            // 87
            "t обратной воды 2",                            // 88
            "Пуск приточной вентиляции",                    // 89
            "Пуск вытяжной вентиляции",                     // 90
            "t воздуха в помещении 1",                      // 91
            "t воздуха в помещении 2",                      // 92
            "t воздуха в помещении 3",                      // 93
            "t кипения фреона",                             // 94
            "Режим Ручной/Автомат П1",                      // 95
            "Режим Ручной/Автомат В1",                      // 96
            "Режим Ручной/Автомат П2",                      // 97
            "Режим Ручной/Автомат В2",                      // 98
            "Режим Ручной/Автомат П3",                      // 99
            "Режим Ручной/Автомат В3",                      // 100
            "Контроль сост.вент-ра В3",                     // 101
            "Контроль сост.вент-ра В10",                    // 102
            "Режим Зима/Лето",                              // 103
            "t контура обх.дорожек",                        // 104
            "t контура подогрева воды",                     // 105
            "Датчик протечки",                              // 106
            "Подмес вытяжного воздуха",                     // 107
            "Обрыв ремня приточного вентилятора",           // 108
            "Обрыв ремня вытяжного вентилятора",            // 109
            String.valueOf((char) 916) + "P1",              // 110
            String.valueOf((char) 916) + "P2",              // 111
            String.valueOf((char) 916) + "P3",              // 112
            String.valueOf((char) 916) + "P4",              // 113
            "Обороты вентилятора",                          // 114
            "Датчик перепада давления",                     // 115
            "Датчик давления",                              // 116
            "Концевик клапана 1 (закр)",                    // 117
            "Концевик клапана 1 (откр)",                    // 118
            "Концевик клапана 2 (закр)",                    // 119
            "Концевик клапана 2 (откр)",                    // 120
            "Концевик клапана 3 (закр)",                    // 121
            "Концевик клапана 3 (откр)",                    // 122
            "Концевик клапана 4 (закр)",                    // 123
            "Концевик клапана 4 (откр)",                    // 124
            "Датчик тока двигателя",                        // 125
    };

    // названия дискретных входов
    private String[] di_names = {
            "Резерв",                                       // 0
            "Термостат капиллярный",                        // 1
            "Контроль состояния приточного вентилятора",    // 2
            "Контроль состояния вытяжного вентилятора",     // 3
            "Контроль состояния приточного фильтра",        // 4
            "Контроль состояния вытяжного фильтра",         // 5
            "Контроль состояния фильтров",                  // 6
            "Режим Ручной/Автомат",                         // 7
            "Контроль состояния циркуляционного насоса",    // 8
            "Датчик пожара",                                // 9
            "Контроль состояния охладителя",                // 10
            "Режим Зима/Лето",                              // 11
            "Контроль состояния ХМ1",                       // 12
            "Контроль состояния ХМ2",                       // 13
            "Контроль состояния ХМ",                        // 14
            "Контроль состояния ККБ",                       // 15
            "Датчик высокого давления",                     // 16
            "Датчик низкого давления",                      // 17
            "Датчик перегрева ТЭН (термоконтакт)",          // 18
            "Датчик высокого давления 2",                   // 19
            "Датчик протока",                               // 20
            "Кнопка Пуск",                                  // 21
            "Кнопка Стоп",                                  // 22
            "Сигнал отключения компрессоров",               // 23
            "Датчик перегрева ТЭН оттайки (термоконтакт)",  // 24
            "Термоконтакт насоса 1 контура вентиляции",     // 25
            "Термоконтакт насоса 2 контура вентиляции",     // 26
            "Термоконтакт насоса 1 контура отопления",      // 27
            "Термоконтакт насоса 2 контура отопления",      // 28
            "Датчик перепада насоса вентиляции",            // 29
            "Датчик перепада насоса отопления",             // 30
            "Датчик давления",                              // 31
            "Оттайка",                                      // 32
            "Вкл/Откл ККБ 1",                               // 33
            "Вкл/Откл ККБ 2",                               // 34
            "Сигнал аварии ККБ 1",                          // 35
            "Сигнал аварии ККБ 2",                          // 36
            "Контроль состояния вытяжного вентилятора 2",   // 37
            "Датчик аварии",                                // 38
            "Контроль состояния рекуператора",              // 39
            "Режим Ручной/Автомат ТП1",                     // 40
            "Режим Ручной/Автомат ТП2",                     // 41
            "Режим Ручной/Автомат ТП3",                     // 42
            "Режим Ручной/Автомат Отопление 1",             // 43
            "Режим Ручной/Автомат Отопление 2",             // 44
            "Режим Ручной/Автомат ГВС",                     // 45
            "Контроль состояния насоса ТП1",                // 46
            "Контроль состояния насоса ТП2",                // 47
            "Контроль состояния насоса ТП3",                // 48
            "Контроль состояния двигателя 1",               // 49
            "Контроль состояния двигателя 2",               // 50
            "Контроль состояния двигателя 3",               // 51
            "Режим Ручной/Автомат 1",                       // 52
            "Режим Ручной/Автомат 2",                       // 53
            "Режим Ручной/Автомат 3",                       // 54
            "Контроль состояния насоса ГВС",                // 55
            "Контроль состояния насоса вентиляции",         // 56
            "Контроль состояния насоса отопления",          // 57
            "Контроль состояния приточного вентилятора 2",  // 58
            "Режим работы",                                 // 59
            "Режим Ручной/Автомат Отопление 1 и 2 этаж",    // 60
            "Контроль состояния насоса отопления 1 и 2 этаж", // 61
            "Контроль состояния компрессора",               // 62
            "Контроль состояния вентилятора КБ1",           // 63
            "Контроль состояния вентилятора КБ2",           // 64
            "Работа по сигналу",                            // 65
            "Автономная работа",                            // 66
            "Контроль уровня в мешалке",                    // 67
            "Контроль состояния двигателя 4",               // 68
            "Контроль сост.вент-ра В4",                     // 69
            "Контроль сост.вент-ра В5",                     // 70
            "Контроль сост.вент-ра В6",                     // 71
            "Контроль сост.вент-ра В7",                     // 72
            "Контроль сост.вент-ра В8",                     // 73
            "Контроль сост.вент-ра В9",                     // 74
            "Контроль состояния циркуляционного насоса 1",  // 75
            "Контроль состояния циркуляционного насоса 2",  // 76
            "Контроль состояния насоса отопления 1",        // 77
            "Контроль состояния насоса отопления 2",        // 78
            "Контроль состояния насоса отопления 3",        // 79
            "Контроль состояния компрессора 1",             // 80
            "Контроль состояния компрессора 2",             // 81
            "Контроль состояния компрессора 3",             // 82
            "Режим Ручной/Автомат П1",                      // 83
            "Режим Ручной/Автомат В1",                      // 84
            "Режим Ручной/Автомат П2",                      // 85
            "Режим Ручной/Автомат В2",                      // 86
            "Режим Ручной/Автомат П3",                      // 87
            "Режим Ручной/Автомат В3",                      // 88
            "Режим Ручной/Автомат Отопление 3",             // 89
            "Контроль сост.вент-ра В10",                    // 90
            "Режим Ручной/Автомат обогрев дорожек",         // 91
            "Режим Ручной/Автомат отопление",               // 92
            "Режим Ручной/Автомат подогрев воды",           // 93
            "Контроль состояния насоса обогрев дорожек",    // 94
            "Контроль состояния насоса отопления",          // 95
            "Контроль состояния насоса подогрев воды",      // 96
            "Контроль состояния HEPA фильтра",              // 97
            "Контроль состояния фильтра 1",                 // 98
            "Контроль состояния фильтра 2",                 // 99
            "Контроль состояния фильтра 3",                 // 100
            "Контроль состояния фильтра 4",                 // 101
            "Контроль состояния сетевого насоса",           // 102
            "Контроль состояния ЧП ПВ",                     // 103
            "Режим Основной/Резервный",                     // 104
            "Пуск резерной установки",                      // 105
            "Режим закрытия клапана 1",                     // 106
            "Режим открытия клапана 1",                     // 107
            "Режим закрытия клапана 2",                     // 108
            "Режим открытия клапана 2",                     // 109
            "Режим закрытия клапана 3",                     // 110
            "Режим открытия клапана 3",                     // 111
            "Режим закрытия клапана 4",                     // 112
            "Режим открытия клапана 4",                     // 113
            "Режим Ручной/Автомат Мешалка",                 // 114
            "Режим Ручной/Автомат Элеватор",                // 115
            "Пуск Элеватор",                                // 116
            "Режим вперед",                                 // 117
            "Режим назад",                                  // 118
    };


    // названия аналоговых выходов
    private String[] ao_names = {
            "Резерв",                                       // 0
            "Клапан на теплоносителе",                      // 1
            "Клапан на холодоносителе",                     // 2
            "Обороты приточного вентилятора",               // 3
            "Обороты вытяжного вентилятора",                // 4
            "Обороты вентиляторов",                         // 5
            "Мощность компрессора",                         // 6
            "Наружная заслонка",                            // 7
            "Заслонка рециркуляции",                        // 8
            "Клапан подмеса вытяжного воздуха",             // 9
            "Клапан оттайки рекуператора",                  // 10
            "Мощность котлов",                              // 11
            "Мощность ТЭН",                                 // 12
            "Обороты роторного рекуператора",               // 13
            "Клапан 2 на теплоносителе",                    // 14
            "Обороты вытяжного вентилятора 2",              // 15
            "Клапан контура ГВС",                           // 16
            "Клапан контура вентиляции",                    // 17
            "Клапан контура отопления",                     // 18
            "Рекуператор",                                  // 19
            "Клапан контура ТП1",                           // 20
            "Клапан контура ТП2",                           // 21
            "Клапан контура ТП3",                           // 22
            "Воздушный клапан 1",                           // 23
            "Воздушный клапан 2",                           // 24
            "Воздушный клапан 3",                           // 25
            "Обороты приточного вентилятора 2",             // 26
            "Клапан контура отопления 1 и 2 этаж",          // 27
            "Клапан 1 на теплоносителе",                    // 28
            "Клапан контура отопления 1",                   // 29
            "Клапан контура отопления 2",                   // 30
            "Клапан контура отопления 3",                   // 31
            "Клапан контура обх.дорожек",                   // 32
            "Клапан контура отопления",                     // 33
            "Клапан контура подогрев.воды",                 // 34
            "Воздушный клапан 4",                           // 35
            "Насос 1",                                      // 36
            "Насос 2",                                      // 37
            "Мощность ТЭН 1",                               // 38
            "Производительность",                           // 39
    };


    // названия дискретных выходов
    private String[] do_names = {
            "Резерв",                                       // 0
            "Циркуляционный насос",                         // 1
            "Наружная заслонка",                            // 2
            "Приточный вентилятор",                         // 3
            "Вытяжной вентилятор",                          // 4
            "Компрессор",                                   // 5
            "Клапан \"Тепло/Холод\"",                       // 6
            "Компрессор 2",                                 // 7
            "Клапан \"Тепло/Холод\" 2",                     // 8
            "ТЭН",                                          // 9
            "ТЭН 1 (ШИМ)",                                  // 10
            "ТЭН 1",                                        // 11
            "ТЭН 2",                                        // 12
            "ТЭН 3",                                        // 13
            "ТЭН 4",                                        // 14
            "Сигнал \"Общая авария\"",                      // 15
            "Сигнал \"Работа\"",                            // 16
            "Сигнал \"Работа компрессора\"",                // 17
            "Сигнал \"Авария вентилятора\"",                // 18
            "Сигнал \"Авария насоса\"",                     // 19
            "Сигнал \"Авария ХМ1\"",                        // 20
            "Сигнал \"Авария ХМ2\"",                        // 21
            "Сигнал \"Угроза замерзания\"",                 // 22
            "ККБ",                                          // 23
            "Соленоид",                                     // 24
            "Охладитель",                                   // 25
            "ТЭН оттайки рекуператора",                     // 26
            "Сигнал \"Работа насоса\"",                     // 27
            "Котел 1",                                      // 28
            "Котел 2",                                      // 29
            "Котел 3",                                      // 30
            "Котел",                                        // 31
            "Прогрев заслонки",                             // 32
            "Вытяжной вентилятор 2",                        // 33
            "Вытяжная заслонка 2",                          // 34
            "Сигнал \"Грязный фильтр\"",                    // 35
            "Насос орошения",                               // 36
            "Увлажнитель",                                  // 37
            "Резервный приточный вентилятор",               // 38
            "Резервный вытяжной вентилятор",                // 39
            "Рекуператор",                                  // 40
            "Насос 1",                                      // 41
            "Насос 2",                                      // 42
            "Клапан (открытие)",                            // 43
            "Клапан (закрытие)",                            // 44
            "Насос 1 контура ГВС",                          // 45
            "Насос 2 контура ГВС",                          // 46
            "Насос 1 контура вентиляции",                   // 47
            "Насос 2 контура вентиляции",                   // 48
            "Насос 1 контура отопления",                    // 49
            "Насос 2 контура отопления",                    // 50
            "Байпас",                                       // 51
            "Наружная заслонка (открытие)",                 // 52
            "Наружная заслонка (закрытие)",                 // 53
            "Клапан 2 (открытие)",                          // 54
            "Клапан 2 (закрытие)",                          // 55
            "Клапан ККБ \"Холод\"",                         // 56
            "Клапан ККБ \"Нагрев\"",                        // 57
            "Фанкойл",                                      // 58
            "Фанкойл 1",                                    // 59
            "Фанкойл 2",                                    // 60
            "Фанкойл 3",                                    // 61
            "Фанкойл 4",                                    // 62
            "Сигнал \"Авария клапанов\"",                   // 63
            "Скорость 1",                                   // 64
            "Скорость 2",                                   // 65
            "Скорость 3",                                   // 66
            "Насос контура ТП1",                            // 67
            "Насос контура ТП2",                            // 68
            "Насос контура ТП3",                            // 69
            "Воздушный клапан 1 (открытие)",                // 70
            "Воздушный клапан 1 (закрытие)",                // 71
            "Воздушный клапан 2 (открытие)",                // 72
            "Воздушный клапан 2 (закрытие)",                // 73
            "Воздушный клапан 3 (открытие)",                // 74
            "Воздушный клапан 3 (закрытие)",                // 75
            "Сетевой насос",                                // 76
            "Сигнал \"Авария основного приточного вентилятора\"",  // 77
            "Сигнал \"Авария резервного приточного вентилятора\"", // 78
            "Сигнал \"Авария основного вытяжного вентилятора\"",   // 79
            "Сигнал \"Авария резервного вытяжного вентилятора\"",  // 80
            "Насос контура отопления 1 и 2 этаж",           // 81
            "Мешалка",                                      // 82
            "Элеватор",                                     // 83
            "Вентилятор завесы 1",                          // 84
            "Вентилятор завесы 2",                          // 85
            "Вентилятор завесы 3",                          // 86
            "Вентилятор завесы 4",                          // 87
            "Вытяжной вентилятор В4",                       // 88
            "Вытяжной вентилятор В5",                       // 89
            "Вытяжной вентилятор В6",                       // 90
            "Вытяжной вентилятор В7",                       // 91
            "Вытяжной вентилятор В8",                       // 92
            "Вытяжной вентилятор В9",                       // 93
            "Мешалка вперед",                               // 94
            "Мешалка назад",                                // 95
            "Приточная заслонка",                           // 96
            "Вытяжная заслонка",                            // 97
            "Насос 1 Отопление 1",                          // 98
            "Насос 2 Отопление 1",                          // 99
            "Насос 1 Отопление 2",                          // 100
            "Насос 2 Отопление 2",                          // 101
            "Насос 1 Отопление 3",                          // 102
            "Насос 2 Отопление 3",                          // 103
            "Сигнал \"Работа двигателя 1\"",                // 104
            "Сигнал \"Работа двигателя 2\"",                // 105
            "Сигнал \"Работа двигателя 3\"",                // 106
            "Сигнал \"Работа двигателя 4\"",                // 107
            "Сигнал \"Грязный фильтр на притоке\"",         // 108
            "Сигнал \"Грязный фильтр на вытяжке\"",         // 109
            "Сигнал \"Авария приточного вентилятора\"",     // 110
            "Сигнал \"Авария вытяжного вентилятора\"",      // 111
            "Компрессор 1",                                 // 112
            "Компрессор 3",                                 // 113
            "Сигнал \"Высокое давление\"",                  // 114
            "Сигнал \"Низкое давление\"",                   // 115
            "Сигнал \"Авария компрессора\"",                // 116
            "Сигнал \"Оттайка\"",                           // 117
            "Сигнал \"Авария ТЭН\"",                        // 118
            "Вытяжной вентилятор В3",                       // 119
            "Сигнал \"Пуск\"",                              // 120
            "Вытяжной вентилятор В10",                      // 121
            "Насос контура обходных дорожек",               // 122
            "Насос контура отопления",                      // 123
            "Насос контура подогрева воды",                 // 124
            "Сигнал \"Авария насоса 1\"",                   // 125
            "Сигнал \"Авария насоса 2\"",                   // 126
            "Сигнал \"Авария насоса 3\"",                   // 127
            "Подогрев картера",                             // 128
            "Сигнал \"Пуск рез.установки\"",                // 129
            "ОЗК",                                          // 130
            "ТЭН 5",                                        // 131
            "ТЭН 6",                                        // 132
            "Насос 1 подпитки",                             // 133
            "Насос 2 подпитки",                             // 134
            "Подпитка",                                     // 135
            "Клапан 1 (закрытие)",                          // 136
            "Клапан 1 (открытие)",                          // 137
            "Клапан 2 (закрытие)",                          // 138
            "Клапан 2 (закрытие)",                          // 139
            "Клапан 3 (закрытие)",                          // 140
            "Клапан 3 (открытие)",                          // 141
            "Клапан 4 (закрытие)",                          // 142
            "Клапан 4 (закрытие)",                          // 143
            "ШНЭК вперед",                                  // 144
            "ШНЭК назад",                                   // 145
    };

    // названия уставок
    private String[] sp_names = {
            "Резерв",                                       // 0
            "t воздуха в режиме Зима",                      // 1
            "t воздуха в режиме Лето",                      // 2
            "t перехода в режим Зима",                      // 3
            String.valueOf((char) 916) + "t перехода в режим Лето",                          // 4
            String.valueOf((char) 916) + "t перехода в режим Нагрев",                        // 5
            String.valueOf((char) 916) + "t перехода в режим Охлаждение",                    // 6
            String.valueOf((char) 916) + "t включения ТЭН",                                  // 7
            String.valueOf((char) 916) + "t отключения ТЭН",                                 // 8
            "Max t ТЭН",                                    // 9
            "Max t фреона",                                 // 10
            String.valueOf((char) 916) + "t включения продува",                              // 11
            String.valueOf((char) 916) + "t отключения продува",                             // 12
            String.valueOf((char) 916) + "t вкл.компрессора в режиме Нагрев",                // 13
            String.valueOf((char) 916) + "t откл.компрессора в режиме Нагрев",               // 14
            String.valueOf((char) 916) + "t вкл.компрессора в режиме Охлаждение",            // 15
            String.valueOf((char) 916) + "t откл.компрессора в режиме Охлаждение",           // 16
            "Y приточного вентилятора (скорость 1)",        // 17
            "Y приточного вентилятора (скорость 2)",        // 18
            "Y приточного вентилятора (скорость 3)",        // 19
            "Y приточного вентилятора (скорость 4)",        // 20
            "Y приточного вентилятора (скорость 5)",        // 21
            "Y приточного вентилятора (скорость 6)",        // 22
            "Y приточного вентилятора (скорость 7)",        // 23
            "Y вентиляторов аварийная",                     // 24
            "ΔY вентиляторов (П-В)",                        // 25
            "Min t фреона в режиме Нагрев",                 // 26
            "Min t фреона в режиме Охлаждение",             // 27
            "Y нач.компрессора",                            // 28
            "Min " + String.valueOf((char) 916) + "t фреона (Т3-Т4)",                        // 29
            "t включения режима Оттайка",                   // 30
            "t отключения режима Оттайка",                  // 31
            "t обратной воды в режиме Ожидание",            // 32
            "t угрозы замерзания по обратной воде",         // 33
            "t прогрева калорифера при уличной t 0" + String.valueOf((char) 176) + "C",      // 34
            "t прогрева калорифера при уличной t -25" + String.valueOf((char) 176) + "C",    // 35
            String.valueOf((char) 916) + "t включения регулятора по обратной воде",          // 36
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде",         // 37
            "t воздуха начальная",                          // 38
            "Y нач.клапана на теплоносителе",               // 39
            "Min t приточного воздуха",                     // 40
            "Max t приточного воздуха",                     // 41
            String.valueOf((char) 916) + "t включения ККБ", // 42
            String.valueOf((char) 916) + "t отключения ККБ",// 43
            "t наружного воздуха включения ККБ",            // 44
            "Влажность воздуха",                            // 45
            String.valueOf((char) 916) + "Rh отключения системы",// 46
            "t воздуха после испарителя",                   // 47
            "t наружного воздуха вкл.прогрева заслонки",    // 48
            "t воздуха за рекуператором",                   // 49
            "t воздуха за рекуператором аварийная",         // 50
            "Y нач.рекуператора",                           // 51
            "t воды",                                       // 52
            String.valueOf((char) 916) + "t включения продува ТЭН",                          // 53
            String.valueOf((char) 916) + "t отключения продува ТЭН",                         // 54
            "Y нач.ТЭН",                                    // 55
            "t контура отопления при t 0" + String.valueOf((char) 176) + "C", // 56
            "t контура отопления при t -25" + String.valueOf((char) 176) + "C", // 57
            "t контура ГВС",                                // 58
            "t контура вентиляции",                         // 59
            "t воздуха после увлажнителя",                  // 60
            String.valueOf((char) 916) + "Rh отключения увлажнителя",                        // 61
            "t воздуха",                                    // 62
            "t воздуха в камере смешения" + String.valueOf((char) 176) + "C",                // 63
            "Y min наружной заслонки",                      // 64
            "t max воздуха" + String.valueOf((char) 176) + "C",                              // 65
            String.valueOf((char) 916) + "t воздуха" + String.valueOf((char) 176) + "C",     // 66
            "Номер группы для фанкойла 1",                  // 67
            "Номер группы для фанкойла 2",                  // 68
            "Номер группы для фанкойла 3",                  // 69
            "Номер группы для фанкойла 4",                  // 70
            "t воздуха min",                                // 71
            "t контура ТП1 при t 5" + String.valueOf((char) 176) + "C", // 72
            "t контура ТП1 при t 0" + String.valueOf((char) 176) + "C", // 73
            "t контура ТП1 при t -25" + String.valueOf((char) 176) + "C", // 74
            "t контура ТП2 при t 5" + String.valueOf((char) 176) + "C", // 75
            "t контура ТП2 при t 0" + String.valueOf((char) 176) + "C", // 76
            "t контура ТП2 при t -25" + String.valueOf((char) 176) + "C", // 77
            "t контура ТП3 при t 5" + String.valueOf((char) 176) + "C", // 78
            "t контура ТП3 при t 0" + String.valueOf((char) 176) + "C", // 79
            "t контура ТП3 при t -25" + String.valueOf((char) 176) + "C", // 80
            "t1 воздуха в режиме Ночь",                     // 81
            "t1 воздуха в режиме День",                     // 82
            "t2 воздуха в режиме Ночь",                     // 83
            "t2 воздуха в режиме День",                     // 84
            "t3 воздуха в режиме Ночь",                     // 85
            "t3 воздуха в режиме День",                     // 86
            "t контура вентиляции при t 5" + String.valueOf((char) 176) + "C", // 87
            "t контура вентиляции при t 0" + String.valueOf((char) 176) + "C", // 88
            "t контура вентиляции при t -25" + String.valueOf((char) 176) + "C", // 89
            "t контура отопления при t 5" + String.valueOf((char) 176) + "C", // 90
            String.valueOf((char) 916) + "Y вентиляторов (П-В) режим 2",      // 91
            String.valueOf((char) 916) + "Y приточного вентилятора режим 2",  // 92
            String.valueOf((char) 916) + "t1 min воздуха",      // 93
            String.valueOf((char) 916) + "t2 min воздуха",      // 94
            String.valueOf((char) 916) + "t3 min воздуха",      // 95
            "t приточного воздуха",                             // 96
            "t воздуха в помещении",                            // 97
            String.valueOf((char) 916) + "t включения оттайки при 0" + String.valueOf((char) 176) + "C",      // 98
            String.valueOf((char) 916) + "t включения оттайки при -25" + String.valueOf((char) 176) + "C",    // 99
            "t входящей воды",                                  // 100
            String.valueOf((char) 916) + "t включения компрессора",                                           // 101
            String.valueOf((char) 916) + "t отключения компрессора",                                          // 102
            "t воды min",                                       // 103
            String.valueOf((char) 916) + "t аварии замораживания",                                            // 104
            String.valueOf((char) 916) + "t сброса аварии замораживания",                                     // 105
            "Каскадный коэффициент",                            // 106
            "t контура отопления 1 при t +5" + String.valueOf((char) 176) + "C", // 107
            "t контура отопления 1 при t -5" + String.valueOf((char) 176) + "C", // 108
            "t контура отопления 1 при t -25" + String.valueOf((char) 176) + "C", // 109
            "t контура отопления 2 при t +5" + String.valueOf((char) 176) + "C", // 110
            "t контура отопления 2 при t -5" + String.valueOf((char) 176) + "C", // 111
            "t контура отопления 2 при t -25" + String.valueOf((char) 176) + "C", // 112
            "t контура отопления 3 при t +5" + String.valueOf((char) 176) + "C", // 113
            "t контура отопления 3 при t -5" + String.valueOf((char) 176) + "C", // 114
            "t контура отопления 3 при t -25" + String.valueOf((char) 176) + "C", // 115
            "t воздуха после калорифера 1",                   // 116
            "t обратной воды 1 в режиме Ожидание",            // 117
            "t угрозы замерзания по обратной воде 1",         // 118
            "t прогрева калорифера 1 при уличной t 0" + String.valueOf((char) 176) + "C",      // 119
            "t прогрева калорифера 1 при уличной t -25" + String.valueOf((char) 176) + "C",    // 120
            String.valueOf((char) 916) + "t включения регулятора по обратной воде 1",          // 121
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде 1",         // 122
            "t воздуха начальная 1",                          // 123
            "Y нач.клапана 1 на теплоносителе",               // 124
            "t обратной воды 2 в режиме Ожидание",            // 125
            "t угрозы замерзания по обратной воде 2",         // 126
            "t прогрева калорифера 2 при уличной t 0" + String.valueOf((char) 176) + "C",      // 127
            "t прогрева калорифера 2 при уличной t -25" + String.valueOf((char) 176) + "C",    // 128
            String.valueOf((char) 916) + "t включения регулятора по обратной воде 2",          // 129
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде 2",         // 130
            "t воздуха начальная 2",                          // 131
            "Y нач.клапана 2 на теплоносителе",               // 132
            String.valueOf((char) 916) + "t включения регулятора по обратной воде 1",          // 133
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде 1",         // 134
            String.valueOf((char) 916) + "t включения регулятора по обратной воде 2",          // 135
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде 2",         // 136
            String.valueOf((char) 916) + "t включения регулятора по обратной воде 3",          // 137
            String.valueOf((char) 916) + "t отключения регулятора по обратной воде 3",         // 138
            "t перехода в режим Зима1",                           // 139
            "t перехода в режим Зима2",                           // 140
            String.valueOf((char) 916) + "t перехода в режим",    // 141
            "Min давление в контуре",                             // 142
            "t контура обходных дорожек",                         // 143
            "t контура подогрева воды",                           // 144
            "t ОВ контура отопления при t +5" + String.valueOf((char) 176) + "C", // 145
            "t ОВ контура отопления при t -5" + String.valueOf((char) 176) + "C", // 146
            "t ОВ контура отопления при t -25" + String.valueOf((char) 176) + "C", // 147
            "Y заслонки рециркуляции",                            // 148
            "Y наружной заслонки",                                // 149
            "Y нач.рег.заслонкой рециркуляции",                   // 150
            "t наружного воздуха точка 1",                        // 151
            "t наружного воздуха точка 2",                        // 152
            "t наружного воздуха точка 3",                        // 153
            "t контура отопления при t1",                         // 154
            "t контура отопления при t2",                         // 155
            "t контура отопления при t3",                         // 156
            String.valueOf((char) 916) + "t контура отопления в режиме НОЧЬ",    // 157
            "Y вкл.котла 1",                                      // 158
            "Y откл.котла 1",                                     // 159
            "Y вкл.котла 2",                                      // 160
            "Y откл.котла 2",                                     // 161
            "Y вкл.котла 3",                                      // 162
            "Y откл.котла 3",                                     // 163
            String.valueOf((char) 916) + "P1",                    // 164
            String.valueOf((char) 916) + "P2",                    // 165
            String.valueOf((char) 916) + "P3",                    // 166
            String.valueOf((char) 916) + "P4",                    // 167
            "t контура ТП",                                       // 168
            "t выходящей воды",                                   // 169
            "Max ток двигателя",                                  // 170
    };


    // названия регуляторов
    private String[] reg_names = {
            "Резерв",                                                   // 0
            "рег.водяного нагрева в режиме Ожидание",                   // 1
            "рег.водяного нагрева в режиме Работа",                     // 2
            "рег.водяного нагрева в режиме Работа ОВ",                  // 3
            "рег.теплового насоса в режиме Нагрев",                     // 4
            "рег.теплового насоса в режиме Охлаждение",                 // 5
            "рег.теплового насоса в режиме Защита от перегрева",        // 6
            "рег.ТЭН",                                                  // 7
            "рег.водяного охладителя",                                  // 8
            "рег.увлажнителя",                                          // 9
            "рег.клапана подмеса",                                      // 10
            "рег.оборотов приточного вентилятора",                      // 11
            "рег.оборотов вытяжного вентилятора",                       // 12
            "рег.оборотов вентилятора",                                 // 13
            "рег.оборотов вентилятора КБ",                              // 14
            "рег.отопления",                                            // 15
            "рег.наружной заслонки",                                    // 16
            "рег.мощности котлов",                                      // 17
            "рег.водяного нагрева 2",                                   // 18
            "рег.оборотов рекуператора",                                // 19
            "рег.по воде",                                              // 20
            "рег.контура ГВС",                                          // 21
            "рег.контура Вентиляция",                                   // 22
            "рег.контура Отопление",                                    // 23
            "рег.байпаса",                                              // 24
            "рег.каскадный",                                            // 25
            "рег.контура Теплый пол 1",                                 // 26
            "рег.контура Теплый пол 2",                                 // 27
            "рег.контура Теплый пол 3",                                 // 28
            "рег.воздушного клапана 1",                                 // 29
            "рег.воздушного клапана 2",                                 // 30
            "рег.воздушного клапана 3",                                 // 31
            "рег.контура Отопление 1",                                  // 32
            "рег.контура Отопление 2",                                  // 33
            "рег.контура Отопление 3",                                  // 34
            "рег.контура Отопление 1 ОВ",                               // 35
            "рег.контура Отопление 2 ОВ",                               // 36
            "рег.контура Отопление 3 ОВ",                               // 37
            "рег.водяного нагрева 1 в режиме Ожидание",                 // 38
            "рег.водяного нагрева 1 в режиме Работа",                   // 39
            "рег.водяного нагрева 1 в режиме Работа ОВ",                // 40
            "рег.водяного нагрева 2 в режиме Ожидание",                 // 41
            "рег.водяного нагрева 2 в режиме Работа",                   // 42
            "рег.водяного нагрева 2 в режиме Работа ОВ",                // 43
            "рег.подогрева обходных дорожек",                           // 44
            "рег.подогрева воды в бассейне",                            // 45
            "рег.воздушного клапана 4",                                 // 46
            "рег.скорости насоса",                                      // 47
    };


    // названия таймеров
    private String[] tm_names = {
            "Резерв",                                                   // 0
            "Время пуска приточного вентилятора",                       // 1
            "Задержка аварии приточного вентилятора",                   // 2
            "Время пуска вытяжного вентилятора",                        // 3
            "Задержка аварии вытяжного вентилятора",                    // 4
            "Время пуска циркуляционного насоса",                       // 5
            "Задержка аварии циркуляционного насоса",                   // 6
            "Время работы насоса в режиме Лето",                        // 7
            "Задержка включения насоса в режиме Лето",                  // 8
            "Время прогрева водяного калорифера",                       // 9
            "Время пуска системы",                                      // 10
            "Время открытия наружной заслонки",                         // 11
            "Задержка аварии приточного фильтра",                       // 12
            "Задержка аварии вытяжного фильтра",                        // 13
            "Задержка аварии фильтра",                                  // 14
            "Задержка аварии ККБ",                                      // 15
            "Задержка аварии ХМ1",                                      // 16
            "Задержка аварии ХМ2",                                      // 17
            "Задержка сброса аварии по питанию",                        // 18
            "Время обдува ТЭН",                                         // 19
            "Период ШИМ ТЭН",                                           // 20
            "Задержка включения оттайки рекуператора",                  // 21
            "Время оттайки рекуператора",                               // 22
            "Время пуска компрессора",                                  // 23
            "Задержка включения соленоида",                             // 24
            "Задержка включения оттайки теплообменника",                // 25
            "Время оттайки теплообменника",                             // 26
            "Задержка аварии по высокому давлению",                     // 27
            "Задержка аварии по низкому давлению",                      // 28
            "Задержка аварии по высокой t фреона",                      // 29
            "Задержка аварии по низкой t фреона",                       // 30
            "Задержка аварии по t перегрева фреона",                    // 31
            "Интервал включения оттайки темлообменника",                // 32
            "Задержка аварии по " + String.valueOf((char) 916) + "t фреона (Т3-Т4)",                     // 33
            "Время пуска компрессора (контур 2)",                       // 34
            "Задержка включения соленоида (контур 2)",                  // 35
            "Задержка аварии по высокому давлению (контур 2)",          // 36
            "Задержка аварии по низкому давлению (контур 2)",           // 37
            "Задержка аварии по высокой t фреона (контур 2)",           // 38
            "Задержка аварии по низкой t фреона (контур 2)",            // 39
            "Задержка аварии по t перегрева фреона (контур 2)",         // 40
            "Задержка аварии по " + String.valueOf((char) 916) + "t фреона (Т3-Т4) (контур 2)",          // 41
            "Min время работы компрессора",                             // 42
            "Min время работы компрессора (контур 2)",                  // 43
            "Время работы вправо",                                      // 44
            "Время работы влево",                                       // 45
            "Время прогрева наружной заслонки",                         // 46
            "Время пуска рекуператора",                                 // 47
            "Задержка аварии рекператора",                              // 48
            "Задержка рестарта рекуператора",                           // 49
            "Время работы насоса 1",                                    // 50
            "Время работы насоса 2",                                    // 51
            "Задержка включения регулятора по t фреона",                // 52
            "Период ШИМ байпас",                                        // 53
            "Время открытия/закрытия клапана",                          // 54
            "Задержка клапана",                                         // 55
            "Задержка вкл.регулятора после оттайки",                    // 56
            "Время работы группы 1 (ч)",                                // 57
            "Время работы группы 2 (ч)",                                // 58
            "Задержка аварии по высокой температуре",                   // 59
            "Время пуска вытяжного вентилятора 2",                      // 60
            "Задержка аварии вытяжного вентилятора 2",                  // 61
            "Время пуска насоса контура ТП1",                           // 62
            "Задержка аварии насоса контура ТП1",                       // 63
            "Время работы насоса контура ТП1 в режиме Лето",            // 64
            "Задержка включения насоса контура ТП1 в режиме Лето",      // 65
            "Время пуска насоса контура ТП2",                           // 66
            "Задержка аварии насоса контура ТП2",                       // 67
            "Время работы насоса контура ТП2 в режиме Лето",            // 68
            "Задержка включения насоса контура ТП2 в режиме Лето",      // 69
            "Время пуска насоса контура ТП3",                           // 70
            "Задержка аварии насоса контура ТП3",                       // 71
            "Время работы насоса контура ТП3 в режиме Лето",            // 72
            "Задержка включения насоса контура ТП3 в режиме Лето",      // 73
            "Задержка воздушного клапана 1",                            // 74
            "Задержка воздушного клапана 2",                            // 75
            "Задержка воздушного клапана 3",                            // 76
            "Время пуска насоса контура ГВС",                           // 77
            "Задержка аварии насоса контура ГВС",                       // 78
            "Время работы насоса контура ГВС в режиме Лето",            // 79
            "Задержка включения насоса контура ГВС в режиме Лето",      // 80
            "Время пуска насоса контура вентиляции",                    // 81
            "Задержка аварии насоса контура вентиляции",                // 82
            "Время работы насоса контура вентиляции в режиме Лето",     // 83
            "Задержка включения насоса контура вентиляции в режиме Лето",// 84
            "Время пуска насоса контура отопления",                     // 85
            "Задержка аварии насоса контура отопления",                 // 86
            "Время работы насоса контура отопления в режиме Лето",      // 87
            "Задержка включения насоса контура отопления в режиме Лето",// 88
            "Время пуска приточного вентилятора 2",                     // 89
            "Задержка аварии приточного вентилятора 2",                 // 90
            "Задержка перехода в режим Лето",                           // 91
            "Задержка включения компрессора",                           // 92
            "Задержка аварии компрессора",                              // 93
            "Задержка аварии вентилятора КБ1",                          // 94
            "Задержка аварии вентилятора КБ2",                          // 95
            "Задержка включения элеватора",                             // 96
            "Задержка аварии вентилятора 1",                            // 97
            "Задержка аварии вентилятора 2",                            // 98
            "Задержка аварии вентилятора 3",                            // 99
            "Задержка аварии вентилятора 4",                            // 100
            "Задержка аварии вытяжного вентилятора В4",                 // 101
            "Задержка аварии вытяжного вентилятора В5",                 // 102
            "Задержка аварии вытяжного вентилятора В6",                 // 103
            "Задержка аварии вытяжного вентилятора В7",                 // 104
            "Задержка аварии вытяжного вентилятора В8",                 // 105
            "Задержка аварии вытяжного вентилятора В9",                 // 106
            "Задержка пуска вентилятора",                               // 107
            "Время работы мешалки",                                     // 108
            "Задержка включения элеватора",                             // 109
            "Задержка сигнала уровня в мешалке",                        // 110
            "Задержка отключения ШНЭКа",                                // 111
            "Время пуска циркуляционного насоса 1",                     // 112
            "Задержка аварии циркуляционного насоса 1",                 // 113
            "Время работы насоса 1 в режиме Лето",                      // 114
            "Задержка включения насоса 1 в режиме Лето",                // 115
            "Время прогрева водяного калорифера 1",                     // 116
            "Время пуска системы 1",                                    // 117
            "Время пуска циркуляционного насоса 2",                     // 118
            "Задержка аварии циркуляционного насоса 2",                 // 119
            "Время работы насоса 2 в режиме Лето",                      // 120
            "Задержка включения насоса 2 в режиме Лето",                // 121
            "Время прогрева водяного калорифера 2",                     // 122
            "Время пуска системы 2",                                    // 123
            "Время пуска насоса отопления 1",                           // 124
            "Задержка аварии отопления 1",                              // 125
            "Время работы отопления 1 в режиме Лето",                   // 126
            "Задержка включения отопления 1 в режиме Лето",             // 127
            "Время пуска насоса отопления 2",                           // 128
            "Задержка аварии отопления 2",                              // 129
            "Время работы отопления 2 в режиме Лето",                   // 130
            "Задержка включения отопления 2 в режиме Лето",             // 131
            "Задержка аварии компрессора 1",                            // 132
            "Задержка аварии компрессора 2",                            // 133
            "Задержка аварии компрессора 3",                            // 134
            "Время слива",                                              // 135
            "Задержка аварии вент-ра В3",                               // 136
            "Задержка пуска вент-ра В3",                                // 137
            "Время пуска насоса отопления 3",                           // 138
            "Задержка аварии отопления 3",                              // 139
            "Время работы отопления 3 в режиме Лето",                   // 140
            "Задержка включения отопления 3 в режиме Лето",             // 141
            "Задержка аварии вытяжного вентилятора В10",                // 142
            "Задержка аварии протечки",                                 // 143
            "Задержка включения ТЭН",                                   // 144
            "Задержка аварии по низкой температуре",                    // 145
            "Задержка включения котла",                                 // 146
            "Задержка аварии протока",                                  // 147
            "Задержка аварии HEPA фильтра",                             // 148
            "Задержка аварии фильтра 1",                                // 149
            "Задержка аварии фильтра 2",                                // 150
            "Задержка аварии фильтра 3",                                // 151
            "Задержка аварии фильтра 4",                                // 152
            "Время пуска сетевого насоса",                              // 153
            "Задержка аварии сетевого насоса",                          // 154
            "Время работы сет.насоса в реж.Лето",                       // 155
            "Задержка вкл.сет.насоса в реж.Лето",                       // 156
            "Время работы мешалки назад",                               // 157
            "Задержка вкл.мешалки",                                     // 158
    };

    // размеры данных
    private int sp_array_size;
    private int reg_array_size;
    private int tm_array_size;
    private int al_array_size;
    private int ram_array_size;
    private int alarm_jornal_size;

    private int alarm_jornal_pointer;
    private boolean alarm_jornal_page_full;
    private int alarm_jornal_pos;
    private boolean alarm_jornal_refresh;

    // массив значений параметров
    //private int[] nParValues = new int[64];
    private int[] nParValues = new int[96];
    private boolean[] bParFlags = new boolean[64];

    // массив флагов аварий
    private boolean[] bAlarmFlags = new boolean[32];

    // названия аварий
    private String[] sAlarmNames = {
            "Резерв",                                                       // 0
            "Авария датчика на U1",                                         // 1
            "Авария датчика на U2",                                         // 2
            "Авария датчика на U3",                                         // 3
            "Авария датчика на U4",                                         // 4
            "Авария датчика на U5",                                         // 5
            "Авария датчика на U6",                                         // 6
            "Авария датчика на U7",                                         // 7
            "Авария датчика на U8",                                         // 8
            "Авария приточного вентилятора",                                // 9
            "Авария вытяжного вентилятора",                                 // 10
            "Авария вентилятора КБ",                                        // 11
            "Авария компрессора",                                           // 12
            "Авария по высокому давлению",                                  // 13
            "Авария по низкому давлению",                                   // 14
            "Высокая t фреона",                                             // 15
            "Низкая t фреона",                                              // 16
            "Авария по перегреву фреона",                                   // 17
            "Авария по " + String.valueOf((char) 916) + "t фреона (T3-T4)", // 18
            "Авария циркуляционного насоса",                                // 19
            "Калорифер не прогревается",                                    // 20
            "Грязный фильтр на притоке",                                    // 21
            "Грязный фильтр на вытяжке",                                    // 22
            "Грязные фильтры",                                              // 23
            "Угроза замерзания по воздуху",                                 // 24
            "Угроза замерзания по ОВ",                                      // 25
            "Перегрев ТЭН (термоконтакт)",                                  // 26
            "Перегрев ТЭН (датчик)",                                        // 27
            "Перегрев ТЭН оттайки (термоконтакт)",                          // 28
            "Перегрев ТЭН оттайки (датчик)",                                // 29
            "Пожар",                                                        // 30
            "Авария по питанию",                                            // 31
            "Авария ХМ1",                                                   // 32
            "Авария ХМ2",                                                   // 33
            "Авария ККБ",                                                   // 34
            "Нет протока",                                                  // 35
            "Авария компрессора 1",                                         // 36
            "Авария компрессора 2",                                         // 37
            "Авария вентилятора КБ 1",                                      // 38
            "Авария вентилятора КБ 2",                                      // 39
            "Авария по высокому давлению 1",                                // 40
            "Авария по низкому давлению 1",                                 // 41
            "Авария по высокому давлению 2",                                // 42
            "Авария по низкому давлению 2",                                 // 43
            "Авария компрессоров",                                          // 44
            "Угроза обмерзания рекуператора",                               // 45
            "Авария вентилятора В2",                                        // 46
            "Авария вентилятора В3",                                        // 47
            "Низкая t воды подачи",                                         // 48
            "Авария по высокому давлению (контур 2)",                       // 49
            "Авария по низкому давлению (контур 2)",                        // 50
            "Высокая t фреона (контур 2)",                                  // 51
            "Низкая t фреона (контур 2)",                                   // 52
            "Авария по перегреву фреона (контур 2)",                        // 53
            "Авария по " + String.valueOf((char) 916) + "t фреона (T3-T4) (контур 2)", // 54
            "Высокая t воздуха",                                            // 55
            "Авария ККБ 1",                                                 // 56
            "Авария ККБ 2",                                                 // 57
            "Авария вентиляторов",                                          // 58
            "Авария резервного вентилятора",                                // 59
            "Высокая t компрессора",                                        // 60
            "Низкая t воздуха в помещении",                                 // 61
            "Авария насоса контура ТП1",                                    // 62
            "Авария насоса контура ТП2",                                    // 63
            "Авария насоса контура ТП3",                                    // 64
            "Авария двигателя 1",                                           // 65
            "Авария двигателя 2",                                           // 66
            "Авария двигателя 3",                                           // 67
            "Авария насоса контура ГВС",                                    // 68
            "Авария насоса контура вентиляции",                             // 69
            "Авария насоса контура отопления",                              // 70
            "Авария приточного вентилятора 2",                              // 71
            "Авария вытяжного вентилятора 2",                               // 72
            "Авария насоса контура отопления 1 и 2 этаж",                   // 73
            "Угроза замораживания",                                         // 74
            "Авария рекуператора",                                          // 75
            "Авария двигателя 4",                                           // 76
            "Авария вытяжного вентилятора В4",                              // 77
            "Авария вытяжного вентилятора В5",                              // 78
            "Авария вытяжного вентилятора В6",                              // 79
            "Авария вытяжного вентилятора В7",                              // 80
            "Авария вытяжного вентилятора В8",                              // 81
            "Авария вытяжного вентилятора В9",                              // 82
            "Авария циркуляционного насоса отопления 1",                    // 83
            "Авария циркуляционного насоса отопления 2",                    // 84
            "Авария циркуляционного насоса отопления 3",                    // 85
            "Авария циркуляционного насоса 1",                              // 86
            "Авария циркуляционного насоса 2",                              // 87
            "Угроза замерзания по ОВ 1",                                    // 88
            "Угроза замерзания по ОВ 2",                                    // 89
            "Калорифер 1 не прогревается",                                  // 90
            "Калорифер 2 не прогревается",                                  // 91
            "Авария компрессора 3",                                         // 92
            "Авария вытяжного вентилятора В10",                             // 93
            "Авария насоса контура обходных дрожек",                        // 94
            "Авария насоса контура подогрева воды",                         // 95
            "Авария протечки",                                              // 96
            "Обрыв ремня прит.вент-ра",                                     // 97
            "Обрыв ремня выт.вент-ра",                                      // 98
            "Грязный HEPA фильтр",                                          // 99
            "Грязный фильтр 1",                                             // 100
            "Грязный фильтр 2",                                             // 101
            "Грязный фильтр 3",                                             // 102
            "Грязный фильтр 4",                                             // 103
            "Авария сетевого насоса",                                       // 104
            "Авария ЧП ПВ",                                                 // 105
    };

    // массив текущих значений Ui, Yi
    // Ui
    // 0 - наружная температура
    // 1 - канальная температура
    // 2 - температура обратной воды
    // 3 - температура в помещении
    // 4 - давление в помещении
    // 5 - датчик двери 1
    // 6 - датчик двери 2
    // 7 - датчик двери 3
    // Yi
    // 8 - клапан на теплоносителе
    // 9 - ЧП вентилятора 1
    // 10 - ЧП вентилятора 2
    // 11 -
    private int[] nInputRegistersData = new int[128];
    static private byte[] symbolArray = new byte[20];

    static private String[][] sPhoneBook = new String[10][2];

    private ListView lvParameter;

    private ParameterListAdaptor adapter;
    private List<Parameter> mParameterList;

    private UiListAdaptor ui_adapter;
    private List<UInput> mUiList;

    private DiListAdaptor di_adapter;
    private List<DInput> mDiList;

    private AoListAdaptor ao_adapter;
    private List<AOutput> mAoList;

    private DoListAdaptor do_adapter;
    private List<DOutput> mDoList;

    private ConfigListAdaptor configListAdaptor;
    private List<ConfigParam> mConfigParamList;

    private FloatingActionButton buttonAddContact;
    private FloatingActionButton buttonDeleteJornalContact;

    private Intent intent;
    private int type;
    private int pos;
    private int security_level;
    private int device_address;
    private int device_algorithm;
    private int chiller_flag;
    private int room_sensor_flag;
    private int fan2_flag;
    private int appMode;

    static private int demoMessageDelayCounter;

    private Timer myTimer1;
    private Timer myTimer2;


    private boolean dialogOnFlag;
    private String tempString1, tempString2, tempString3;
    private String tempString4, tempString5, tempString6;
    private String tempString7, tempString8;

    static private int weekday, date, month, year, hours, minutes, seconds;
    private TimeProgram timeProgram[] = new TimeProgram[3];
    private TimeProgram timeProgramExtra[] = new TimeProgram[2];


    private OnRequestBack<short[]> onRequestBackReadInputRegisters;
    private OnRequestBack<boolean[]> onRequestBackReadDiscreteInputs;
    private OnRequestBack<short[]> onRequestBackReadHoldingRegisters;
    private OnRequestBack<String> onRequestBackWriteRegister;
    private OnRequestBack<boolean[]> onRequestBackReadCoils;
    private OnRequestBack<String> onRequestBackWriteCoil;
    private OnRequestBack<String> onRequestBackWriteRegisters;

    private OnRequestBack<String> onRequestBackModbusInit;
    static private boolean netInitSuccessFlag;
    static private boolean paramReadSuccessFlag;
    static private boolean paramReadSuccessFlag2;

    public static final int PERMISSIONS_REQUEST_CODE = 0;
    public static final int ALG_FILE_PICKER_REQUEST_CODE = 1;
    public static final int FW_FILE_PICKER_REQUEST_CODE = 2;

    private SharedPreferences sPref;
    static private String sLocalIP;
    static private String sGlobalIP;
    static private String port_number;
    static private String device_ip;
    static private String device_id;

    private ProgressBar wait_bar;

    private WifiManager wifiManager;

    public SetpointsActivity() {
        onRequestBackReadDiscreteInputs = null;
        onRequestBackReadHoldingRegisters = null;
        onRequestBackWriteRegister = null;
        onRequestBackReadInputRegisters = null;
        onRequestBackReadCoils = null;
        onRequestBackWriteCoil = null;
        onRequestBackWriteRegisters = null;

        onRequestBackModbusInit = null;

        timeProgram[0] = new TimeProgram(0,0,0,0,0,0,0,false);
        timeProgram[1] = new TimeProgram(0,0,0,0,0,0,0,false);
        timeProgram[2] = new TimeProgram(0,0,0,0,0,0,0,false);

        timeProgramExtra[0] = new TimeProgram(0,0,0,0,0,0,0,false);
        timeProgramExtra[1] = new TimeProgram(0,0,0,0,0,0,0,false);

        myTimer1 = null;
        myTimer2 = null;

        dialogOnFlag = false;

        type = 0;
        pos = -1;
        security_level = 0;
        device_address = 2;
        device_algorithm = 101;

        sp_array_size = 40;
        reg_array_size = 21;
        tm_array_size = 24;
        al_array_size = 24;
        ram_array_size = 32;
        alarm_jornal_size = 80;

        alarm_jornal_pointer = 0;
        alarm_jornal_page_full = false;
        alarm_jornal_pos = 0;
        alarm_jornal_refresh = false;

        // var init
        for (int i = 0; i < nParValues.length; i++)
            nParValues[i] = 0;

        for (int i = 0; i < bAlarmFlags.length; i++)
            bAlarmFlags[i] = false;

        for (int i = 0; i < nInputRegistersData.length; i++)
            nInputRegistersData[i] = 0;

        for (int i = 0; i < bParFlags.length; i++)
            bParFlags[i] = false;

        //bAlarmFlags[9] = true;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_setpoints);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        // Get WifiManager
        wifiManager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);


        sPref = getSharedPreferences("MyPref", MODE_PRIVATE);

        sPhoneBook[0][0] = sPref.getString("CONTACT_NAME_1", "");
        sPhoneBook[0][1] = sPref.getString("CONTACT_NUMBER_1", "");
        sPhoneBook[1][0] = sPref.getString("CONTACT_NAME_2", "");
        sPhoneBook[1][1] = sPref.getString("CONTACT_NUMBER_2", "");
        sPhoneBook[2][0] = sPref.getString("CONTACT_NAME_3", "");
        sPhoneBook[2][1] = sPref.getString("CONTACT_NUMBER_3", "");
        sPhoneBook[3][0] = sPref.getString("CONTACT_NAME_4", "");
        sPhoneBook[3][1] = sPref.getString("CONTACT_NUMBER_4", "");
        sPhoneBook[4][0] = sPref.getString("CONTACT_NAME_5", "");
        sPhoneBook[4][1] = sPref.getString("CONTACT_NUMBER_5", "");
        sPhoneBook[5][0] = sPref.getString("CONTACT_NAME_6", "");
        sPhoneBook[5][1] = sPref.getString("CONTACT_NUMBER_6", "");
        sPhoneBook[6][0] = sPref.getString("CONTACT_NAME_7", "");
        sPhoneBook[6][1] = sPref.getString("CONTACT_NUMBER_7", "");
        sPhoneBook[7][0] = sPref.getString("CONTACT_NAME_8", "");
        sPhoneBook[7][1] = sPref.getString("CONTACT_NUMBER_8", "");
        sPhoneBook[8][0] = sPref.getString("CONTACT_NAME_9", "");
        sPhoneBook[8][1] = sPref.getString("CONTACT_NUMBER_9", "");
        sPhoneBook[9][0] = sPref.getString("CONTACT_NAME_10", "");
        sPhoneBook[9][1] = sPref.getString("CONTACT_NUMBER_10", "");

        buttonAddContact = (FloatingActionButton) findViewById(R.id.addContactButton);
        buttonAddContact.setVisibility(View.INVISIBLE);
        buttonAddContact.setOnClickListener(null);

        buttonDeleteJornalContact = (FloatingActionButton) findViewById(R.id.deleteAlarmJornalButton);
        buttonDeleteJornalContact.setVisibility(View.INVISIBLE);
        buttonDeleteJornalContact.setOnClickListener(null);

        netInitSuccessFlag = true;
        paramReadSuccessFlag = false;
        paramReadSuccessFlag2 = false;
        wait_bar = (ProgressBar) findViewById(R.id.progressBarWaitSetpoints);
        wait_bar.setVisibility(View.VISIBLE);



        // ReadInputRegisters
        onRequestBackReadInputRegisters = new OnRequestBack<short[]>() {
            @Override
            public void onSuccess(short[] data) {
                if (type > 4) {
                    paramReadSuccessFlag = true;
                    paramReadSuccessFlag2 = true;
                } else if (type > 0) {
                    paramReadSuccessFlag2 = true;
                }
                for (int i = 0; i < nInputRegistersData.length; i++)
                    nInputRegistersData[i] = data[i];
            }

            @Override
            public void onFailed(String msg) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 4 failed " + msg, Toast.LENGTH_SHORT).show();
                if (type > 4) {
                    netInitSuccessFlag = false;
                    paramReadSuccessFlag = false;
                }
            }
        };

        // ReadDiscreteInputs
        onRequestBackReadDiscreteInputs = new OnRequestBack<boolean[]>() {
            @Override
            public void onSuccess(boolean[] booleans) {
                paramReadSuccessFlag = true;
                for (int i = 0; i < bAlarmFlags.length; i++)
                    bAlarmFlags[i] = booleans[i];
            }

            @Override
            public void onFailed(String s) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 2 failed " + s, Toast.LENGTH_SHORT).show();
               netInitSuccessFlag = false;
                paramReadSuccessFlag = false;
            }
        };

        // ReadHoldingRegisters
        onRequestBackReadHoldingRegisters = new OnRequestBack<short[]>() {
            @Override
            public void onSuccess(short[] data) {
                paramReadSuccessFlag = true;
                for (int i = 0; i < nParValues.length; i++)
                    nParValues[i] = data[i];
            }

            @Override
            public void onFailed(String s) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 3 failed " + s, Toast.LENGTH_SHORT).show();
                netInitSuccessFlag = false;
                paramReadSuccessFlag = false;
            }
        };

        // ReadCoil
        onRequestBackReadCoils = new OnRequestBack<boolean[]>() {
            @Override
            public void onSuccess(boolean[] booleans) {
                paramReadSuccessFlag = true;
                for (int i = 0; i < bParFlags.length; i++)
                    bParFlags[i] = booleans[i];
            }

            @Override
            public void onFailed(String msg) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 15 failed " + msg, Toast.LENGTH_SHORT).show();
                netInitSuccessFlag = false;
                paramReadSuccessFlag = false;
            }
        };

        // WriteRegister
        onRequestBackWriteRegister = new OnRequestBack<String>() {
            @Override
            public void onSuccess(String s) {
            }

            @Override
            public void onFailed(String s) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 6 failed " + s, Toast.LENGTH_SHORT).show();
            }
        };

        // WriteCoil
        onRequestBackWriteCoil = new OnRequestBack<String>() {
            @Override
            public void onSuccess(String s) {
            }

            @Override
            public void onFailed(String msg) {
                //Toast.makeText(getApplicationContext(), "MODBUS function 5 failed " + msg, Toast.LENGTH_SHORT).show();
            }
        };

        // WriteRegister
        onRequestBackWriteRegisters = new OnRequestBack<String>() {
            @Override
            public void onSuccess(String s) {

            }

            @Override
            public void onFailed(String s) {

            }
        };

        // Modbus init
        onRequestBackModbusInit = new OnRequestBack<String>() {
            @Override
            public void onSuccess(String s) {
                netInitSuccessFlag = true;
            }

            @Override
            public void onFailed(String msg) {
                netInitSuccessFlag = false;
                paramReadSuccessFlag = false;
                paramReadSuccessFlag2 = false;
            }
        };



        Intent intent = getIntent();
        type = intent.getIntExtra("par", 0);
        appMode = intent.getIntExtra("app_mode", 1);
        device_algorithm = intent.getIntExtra("device_algorithm", 101);
        device_ip = intent.getStringExtra("device_ip");
        device_address = intent.getIntExtra("device_address", 2);
        port_number = intent.getStringExtra("port_number");

        device_id = intent.getStringExtra("serial_number");
        if (device_algorithm != 986) {
            if (appMode == 2 || (Integer.parseInt(device_id) >= 1200 && Integer.parseInt(device_id) < 5000)) {
                timeout = 500;
                period = 1000;
            }
        }


        /*if (appMode == 1) {
            ModbusReq.getInstance().setParam(new ModbusParam()
                    .setHost("10.10.100.254")
                    .setPort(Integer.parseInt("8899"))
                    .setEncapsulated(false)
                    .setKeepAlive(true)
                    .setTimeout(3000)
                    .setRetries(0))
                    .init(onRequestBackModbusInit);
        }

        if (appMode == 3) {
            ModbusReq.getInstance().setParam(new ModbusParam()
                    .setHost(device_ip)
                    .setPort(Integer.parseInt("8899"))
                    .setEncapsulated(false)
                    .setKeepAlive(true)
                    .setTimeout(3000)
                    .setRetries(0))
                    .init(onRequestBackModbusInit);
        }*/

        switch (type) {
            case 1:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Уставки");
                break;

            case 2:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Регуляторы");
                break;

            case 3:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Таймеры");
                break;

            case 4:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                // add data for list
                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Текущие аварии");
                break;

            case 5:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mUiList = new ArrayList<>();

                // add data for list
                mUiList.add(new UInput("Идет загрузка данных...",
                        -999, false, 0, 0, 0, 0, 0, 0));


                ui_adapter = new UiListAdaptor(getApplicationContext(), R.layout.ui_item_list, mUiList);
                lvParameter.setAdapter(ui_adapter);

                setTitle("Универсальные входы");
                break;

            case 6:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mDiList = new ArrayList<>();

                // add data for list
                mDiList.add(new DInput("Идет загрузка данных...", -999, false, 0, false));

                di_adapter = new DiListAdaptor(getApplicationContext(), R.layout.di_item_list, mDiList);
                lvParameter.setAdapter(di_adapter);

                setTitle("Дискретные входы");
                break;

            case 7:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mAoList = new ArrayList<>();

                mAoList.add(new AOutput("Идет загрузка данных...", -999, false, 0, false, 0, 0));

                ao_adapter = new AoListAdaptor(getApplicationContext(), R.layout.ao_item_list, mAoList);
                lvParameter.setAdapter(ao_adapter);

                setTitle("Аналоговые выходы");
                break;

            case 8:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mDoList = new ArrayList<>();

                mDoList.add(new DOutput("Идет загрузка данных...", -999, false, 0, false));

                do_adapter = new DoListAdaptor(getApplicationContext(), R.layout.do_item_list, mDoList);
                lvParameter.setAdapter(do_adapter);

                setTitle("Дискретные выходы");
                break;

            case 9:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                // add data for list
                /*mParameterList.add(new Parameter("Установить дату", "01.01.2018"));
                mParameterList.add(new Parameter("Установить время", "00:00"));
                mParameterList.add(new Parameter("Установить день недели", "Пн"));
                mParameterList.add(new Parameter("Временная программа 1", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                mParameterList.add(new Parameter("Временная программа 2", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                mParameterList.add(new Parameter("Временная программа 3", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));

                sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
                if (sPref.getBoolean("TIME_DATE_AUTO_ADJUSTMENT", false)) {
                    mParameterList.add(new Parameter("Автоматическая коррекция даты и времени", "Включено"));
                } else {
                    mParameterList.add(new Parameter("Автоматическая коррекция даты и времени", "Отключено"));
                }

                if (device_algorithm == 10203) {
                    mParameterList.add(new Parameter("Временная программа 4", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                    //mParameterList.add(new Parameter("Временная программа 5", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                }*/

                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));


                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.time_and_date_list, mParameterList);
                lvParameter.setAdapter(adapter);

                //ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                //        device_address, 3705, nParValues.length);

                setTitle("Дата и время");
                break;

            case 10:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Системные");
                break;

            case 11:
                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mConfigParamList = new ArrayList<>();


                mConfigParamList.add(new ConfigParam("Регулирование по температуре вытяжного воздуха", true));

                configListAdaptor = new ConfigListAdaptor(getApplicationContext(), R.layout.config_param_list, mConfigParamList);
                lvParameter.setAdapter(configListAdaptor);

                //ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                //        device_address, 3072, ram_array_size);

                setTitle("Конфигурация");
                break;

            case 12:
                buttonAddContact = (FloatingActionButton) findViewById(R.id.addContactButton);
                buttonAddContact.setVisibility(View.VISIBLE);
                buttonAddContact.setOnClickListener(this);

                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                mParameterList.clear();

                for (int i = 0; i < sPhoneBook.length; i++) {
                    if (!sPhoneBook[i][1].isEmpty())
                        mParameterList.add(new Parameter(sPhoneBook[i][0], sPhoneBook[i][1]));
                }

                if (mParameterList.size() == 0)
                    mParameterList.add(new Parameter("Список контактов пуст", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list, mParameterList);
                lvParameter.setAdapter(adapter);

                setTitle("Контакты");
                break;

            case 13:
                buttonDeleteJornalContact = (FloatingActionButton) findViewById(R.id.deleteAlarmJornalButton);
                buttonDeleteJornalContact.setVisibility(View.VISIBLE);
                buttonDeleteJornalContact.setOnClickListener(this);

                lvParameter = (ListView) findViewById(R.id.listSetpoints);
                mParameterList = new ArrayList<>();

                // add data for list
                mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list1, mParameterList);
                lvParameter.setAdapter(adapter);

                //if (appMode != 2) {
                //    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,
                //            device_address, 1024 + alarm_jornal_pointer, alarm_jornal_size);
                //}

                setTitle("Журнал аварий");
                break;

            default:
                break;

        }

        lvParameter.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (dialogOnFlag) return;

                pos = position;
                switch (type) {
                    case 1:
                    case 2:
                    case 3:
                        openNewParamValueDialog();
                        break;
                    case 4:
                        alarmResetDialog();
                        break;
                    case 5:
                        openUInputParamDialog(pos);
                        break;
                    case 6:
                        openDInputParamDialog(pos);
                        break;
                    case 7:
                        openAOutputParamDialog(pos);
                        break;
                    case 8:
                        openDOutputParamDialog(pos);
                        break;
                    case 9:
                        if (pos == 0)
                            openNewDateDialog();
                        else if (pos == 1)
                            openNewTimeDialog();
                        else if (pos == 2)
                            openSetWeekdayDialog();
                        else if (pos == 3 || pos == 4 || pos == 5)
                            openTimeProgramDialog(pos);
                        else if (pos == 7 || pos == 8)
                            openTimeProgramDialogExtra(pos);
                        else if (pos == 6)
                            timeAndDateAutoAdjustmentEnable();
                        break;
                    case 10:
                        if (pos == 0)
                            openNewSystemNameDialog();
                        else if (pos == 2 || pos == 7 || pos == 8 || pos == 9)
                            openNewParamValueDialog();
                        else if (pos == 3 || pos == 4)
                            checkPermissionsAndOpenFilePicker();
                        else if (pos == 5)
                            alarmSMSSendEnable();
                        else if (pos == 6)
                            secondSlaveModeEnable();
                        else if (pos == 10)
                            lowLevelFreeAccessModeEnable();
                        else if (pos == 11)
                            systemReset();
                        else if (pos == 12)
                            systemRestoreFactorySettings();
                        break;
                    case 11:
                        newConfigCondParam(pos);
                        break;
                    case 12:
                        deleteContactDialog();
                        break;
                    case 13:
                        if (pos == alarm_jornal_pos) {
                            if (alarm_jornal_page_full) {
                                alarm_jornal_pointer += 10;
                                if (alarm_jornal_pointer > 90)
                                    alarm_jornal_pointer = 0;
                            } else {
                                alarm_jornal_pointer = 0;
                            }

                            mParameterList.clear();
                            lvParameter = (ListView) findViewById(R.id.listSetpoints);
                            mParameterList = new ArrayList<>();

                            // add data for list
                            mParameterList.add(new Parameter("Идет загрузка данных...", "-999"));

                            adapter = new ParameterListAdaptor(getApplicationContext(), R.layout.settings_item_list1, mParameterList);
                            lvParameter.setAdapter(adapter);

                            alarm_jornal_refresh = true;
                        }
                        break;
                }
            }
        });

        if (myTimer1 != null) {
            myTimer1.cancel();
            myTimer1 = null;
        }

        myTimer1 = new Timer();
        myTimer1.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod();
            }

        }, delay, period);
    }


    @Override
    public void onClick(View v) {
        if (dialogOnFlag) return;

        switch (v.getId()){
            case R.id.addContactButton:
                addContactDialog();
                break;
            case R.id.deleteAlarmJornalButton:
                alarmJornalDeleteDialog();
                break;
            default:
                break;
        }
    }

    public void timeAndDateAutoAdjustmentEnable() {

        dialogOnFlag = true;
        Toast.makeText(this, "Изменение параметра", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 2000);

        sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
        SharedPreferences.Editor ed = sPref.edit();

        if (sPref.getBoolean("TIME_DATE_AUTO_ADJUSTMENT", false)) {
            ed.putBoolean("TIME_DATE_AUTO_ADJUSTMENT", false);
        } else {
            ed.putBoolean("TIME_DATE_AUTO_ADJUSTMENT", true);
        }
        ed.commit();
    }

    public void alarmSMSSendEnable() {

        dialogOnFlag = true;
        Toast.makeText(this, "Изменение параметра", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);

        sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
        SharedPreferences.Editor ed = sPref.edit();

        if (sPref.getBoolean("ALARM_SMS_FLAG", false)) {
            ed.putBoolean("ALARM_SMS_FLAG", false);
        } else {
            ed.putBoolean("ALARM_SMS_FLAG", true);
        }
        ed.commit();
    }

    public void secondSlaveModeEnable() {

        dialogOnFlag = true;
        Toast.makeText(this, "Изменение параметра", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);

        if (bParFlags[0]) {
            ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                    device_address, 6, false);

            bParFlags[0] = false;
        } else {
            ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                    device_address, 6, true);

            bParFlags[0] = true;
        }
    }

    public void systemReset() {

        dialogOnFlag = true;
        Toast.makeText(this, "Перезагрузка...", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);

        ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                    device_address, 1, true);
    }

    public void systemRestoreFactorySettings() {

        if ((Integer.parseInt(device_id) < 1200)) {
            Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;
        Toast.makeText(this, "Возврат заводских настроек...", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);

        ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                device_address, 7, true);
    }

    public void lowLevelFreeAccessModeEnable() {

        if (security_level <= 3) {
            Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;
        Toast.makeText(this, "Изменение параметра", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);

        sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
        SharedPreferences.Editor ed = sPref.edit();

        if (sPref.getBoolean("LOW_LEVEL_FREE_ACCESS_MODE", false)) {
            ed.putBoolean("LOW_LEVEL_FREE_ACCESS_MODE", false);
        } else {
            ed.putBoolean("LOW_LEVEL_FREE_ACCESS_MODE", true);
        }
        ed.commit();
    }

    public void newConfigParam(int pos) {
        int offset;
        int newValue;

        if (device_algorithm == 10004) {
            Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
            return;
        }

        switch (pos) {
            case 0:
                offset = 3078;
                Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
                return;
            case 1:
                if (device_algorithm == 102 || (device_algorithm >= 10201 && device_algorithm <= 10299)) {
                    Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
                    return;
                }
                offset = 3087;
                break;
            case 2:
                offset = 3094;
                break;
            case 3:
                /*if (device_algorithm == 102 || (device_algorithm >= 10201 && device_algorithm <= 10299)) {
                    Toast.makeText(this, "Изменение недоступно", Toast.LENGTH_SHORT).show();
                    return;
                }*/
                offset = 3079;
                break;
            case 4:
                offset = 3093;
                break;
            case 5:
                offset = 3088;
                break;
            case 6:
                offset = 3086;
                break;
            default:
                return;
        }

        dialogOnFlag = true;

        Toast.makeText(this, "Изменение конфигурации", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);


        if (pos != 6) {
            if (mConfigParamList.get(pos).isEnabled())
                newValue = 0;
            else
                newValue = 1;
        } else {
            if (mConfigParamList.get(pos).isEnabled())
                newValue = 1;
            else
                newValue = 0;
        }

        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                device_address, offset, newValue);
    }

    public void newConfigCondParam(int pos) {
        int offset;
        int newValue;

        switch (pos) {
            case 0:
                offset = 3088;
                break;
            default:
                return;
        }

        dialogOnFlag = true;

        Toast.makeText(this, "Изменение конфигурации", Toast.LENGTH_SHORT).show();

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        myTimer2 = new Timer();
        myTimer2.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod2();
            }

        }, 2000, 3000);


        if (mConfigParamList.get(pos).isEnabled()) {
            newValue = 0;
        } else {
            newValue = 1;
        }

        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                device_address, offset, newValue);
    }

    private void TimerMethod2()
    {
        //This method is called directly by the timer
        //and runs in the same thread as the timer.

        //We call the method that will work with the UI
        //through the runOnUiThread method.
        this.runOnUiThread(Timer_Tick2);
    }


    private Runnable Timer_Tick2 = new Runnable() {
        public void run() {
            pos = -1;
            dialogOnFlag = false;

            if (myTimer2 != null) {
                myTimer2.cancel();
                myTimer2 = null;
            }
        }
    };

    public void openSetWeekdayDialog() {
        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putInt("PARAM_WEEKDAY_KEY", weekday);

        SetWeekdayDialog newWeekdayDialog = new SetWeekdayDialog();
        newWeekdayDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        newWeekdayDialog.show(transaction, "param");
    }

    public void openNewSystemNameDialog() {
        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putString("PARAM_SYSTEM_NAME_KEY", tempString1);

        SetSystemNameDialog newSystemNameDialog = new SetSystemNameDialog();
        newSystemNameDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        newSystemNameDialog.show(transaction, "param");
    }

    public void openNewParamValueDialog() {

        if (mParameterList.get(pos).getValue().equals("-999")) {
            Toast.makeText(this, "Нет доступа", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        if (type == 10) {
            if (pos == 7) {
                bundle.putInt("PARAM_VAL_KEY", nParValues[0]);
            } else if (pos == 8) {
                bundle.putInt("PARAM_VAL_KEY", nParValues[1]);
            } else if (pos == 9) {
                bundle.putInt("PARAM_VAL_KEY", nParValues[2]);
            } else {
                bundle.putInt("PARAM_VAL_KEY", nInputRegistersData[0]);
            }
        } else {
            bundle.putInt("PARAM_VAL_KEY", nParValues[pos]);
        }
        bundle.putBoolean("MAIN_SCREEN_KEY", false);

        SetParamDialog newParamValueDialog = new SetParamDialog();
        newParamValueDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        newParamValueDialog.show(transaction, "param");
    }

    public void alarmResetDialog() {
        dialogOnFlag = true;

        AlarmResetDialog alarmResetDialog = new AlarmResetDialog();
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        alarmResetDialog.show(transaction, "al_reset");
    }

    public void alarmJornalDeleteDialog() {
        dialogOnFlag = true;

        JornalDeleteDialog alarmJornalDeleteDialog = new JornalDeleteDialog();
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        alarmJornalDeleteDialog.show(transaction, "al_jornal_delete");
    }

    public void addContactDialog() {
        dialogOnFlag = true;

        for (int i = 0; i < sPhoneBook.length; i++) {
            if (sPhoneBook[i][1].isEmpty()) {
                pos = i;

                ContactAddDialog contactAddDialog = new ContactAddDialog();
                contactAddDialog.show(getSupportFragmentManager(), "add_contact");
                return;
            }
        }

        Toast.makeText(this, "Максимум 10 контактов", Toast.LENGTH_SHORT).show();
        dialogOnFlag = false;
    }

    public void deleteContactDialog() {
        dialogOnFlag = true;

        for (int i = 0; i < sPhoneBook.length; i++) {
            if (!sPhoneBook[i][1].isEmpty()) {
                ContactDeleteDialog contactDeleteDialog = new ContactDeleteDialog();
                FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
                contactDeleteDialog.show(transaction, "contact_delete");
                return;
            }
        }
        dialogOnFlag = false;
    }

    public void openUInputParamDialog(int pos) {

        if (mUiList.get(pos).getValue() == -999 || mUiList.get(pos).getSensor() == 4) {
            Toast.makeText(this, "Нет доступа", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putInt("UI_HAND_MODE_VALUE_KEY", nParValues[pos]);
        bundle.putInt("UI_SENSOR_KEY", nParValues[pos+8]);
        bundle.putInt("UI_OFFSET_VALUE_KEY", nParValues[pos+16]);
        bundle.putInt("UI_MIN_VALUE_KEY", nParValues[pos+32]);
        bundle.putInt("UI_MAX_VALUE_KEY", nParValues[pos+24]);
        bundle.putBoolean("UI_MODE_KEY", bParFlags[pos]);

        // dialog
        UInputParamDialog uiDialog = new UInputParamDialog();
        uiDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        uiDialog.show(transaction, "ui");
    }

    public void openDInputParamDialog(int pos) {

        if (mDiList.get(pos).getState() == -999) {
            Toast.makeText(this, "Нет доступа", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putBoolean("DI_MODE_KEY", bParFlags[pos]);
        bundle.putBoolean("DI_HAND_MODE_STATE_KEY", bParFlags[pos+8]);
        bundle.putBoolean("DI_INVERSION_KEY", bParFlags[pos+16]);

        // dialog
        DInputParamDialog diDialog = new DInputParamDialog();
        diDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        diDialog.show(transaction, "di");
    }

    public void openAOutputParamDialog(int pos) {

        if (mAoList.get(pos).getValue() == -999) {
            Toast.makeText(this, "Нет доступа", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putInt("AO_HAND_MODE_VALUE_KEY", nParValues[pos]);
        bundle.putInt("AO_MIN_VALUE_KEY", nParValues[pos+12]);
        bundle.putInt("AO_MAX_VALUE_KEY", nParValues[pos+8]);
        bundle.putBoolean("AO_MODE_KEY", bParFlags[pos]);
        bundle.putBoolean("AO_INVERSION_KEY", bParFlags[pos+4]);

        // dialog
        AOutputParamDialog aoDialog = new AOutputParamDialog();
        aoDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        aoDialog.show(transaction, "ao");
    }

    public void openDOutputParamDialog(int pos) {

        if (mDoList.get(pos).getState() == -999) {
            Toast.makeText(this, "Нет доступа", Toast.LENGTH_SHORT).show();
            return;
        }

        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putBoolean("DO_MODE_KEY", bParFlags[pos]);
        bundle.putBoolean("DO_HAND_MODE_STATE_KEY", bParFlags[pos+16]);
        bundle.putBoolean("DO_INVERSION_KEY", bParFlags[pos+48]);

        // dialog
        DOutputParamDialog doDialog = new DOutputParamDialog();
        doDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        doDialog.show(transaction, "do");
    }

    public void openNewDateDialog() {
        dialogOnFlag = true;

        DatePickerDialog newDateDialog = new DatePickerDialog(SetpointsActivity.this, SetpointsActivity.this, year, month-1, date);
        newDateDialog.show();
    }

    public void openNewTimeDialog() {
        dialogOnFlag = true;

        TimePickerDialog newTimeDialog = new TimePickerDialog(SetpointsActivity.this, SetpointsActivity.this,
                hours, minutes, DateFormat.is24HourFormat(SetpointsActivity.this));

        newTimeDialog.show();
    }

    public void openTimeProgramDialog(int pos) {
        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putInt("TIME_PROG_SEC_ON_KEY", timeProgram[pos-3].getSec_on());
        bundle.putInt("TIME_PROG_MIN_ON_KEY", timeProgram[pos-3].getMin_on());
        bundle.putInt("TIME_PROG_HOUR_ON_KEY", timeProgram[pos-3].getHour_on());
        bundle.putInt("TIME_PROG_SEC_OFF_KEY", timeProgram[pos-3].getSec_off());
        bundle.putInt("TIME_PROG_MIN_OFF_KEY", timeProgram[pos-3].getMin_off());
        bundle.putInt("TIME_PROG_HOUR_OFF_KEY", timeProgram[pos-3].getHour_off());
        bundle.putInt("TIME_PROG_WEEKDAYS_KEY", timeProgram[pos-3].getWeekdays());
        bundle.putBoolean("TIME_PROG_EN_KEY", timeProgram[pos-3].isEnabled());

        // dialog
        SetTimeProgramDialog tpDialog = new SetTimeProgramDialog();
        tpDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        tpDialog.show(transaction, "time_program");
    }

    public void openTimeProgramDialogExtra(int pos) {
        dialogOnFlag = true;

        // data
        Bundle bundle = new Bundle();
        bundle.putInt("TIME_PROG_SEC_ON_KEY", timeProgramExtra[pos-7].getSec_on());
        bundle.putInt("TIME_PROG_MIN_ON_KEY", timeProgramExtra[pos-7].getMin_on());
        bundle.putInt("TIME_PROG_HOUR_ON_KEY", timeProgramExtra[pos-7].getHour_on());
        bundle.putInt("TIME_PROG_SEC_OFF_KEY", timeProgramExtra[pos-7].getSec_off());
        bundle.putInt("TIME_PROG_MIN_OFF_KEY", timeProgramExtra[pos-7].getMin_off());
        bundle.putInt("TIME_PROG_HOUR_OFF_KEY", timeProgramExtra[pos-7].getHour_off());
        bundle.putInt("TIME_PROG_WEEKDAYS_KEY", timeProgramExtra[pos-7].getWeekdays());
        bundle.putBoolean("TIME_PROG_EN_KEY", timeProgramExtra[pos-7].isEnabled());

        // dialog
        SetTimeProgramDialog tpDialog = new SetTimeProgramDialog();
        tpDialog.setArguments(bundle);
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        tpDialog.show(transaction, "time_program_extra");
    }

    private void checkPermissionsAndOpenFilePicker() {
        String permission = Manifest.permission.READ_EXTERNAL_STORAGE;

        if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {
                Toast.makeText(this, "Требуется разрешить доступ", Toast.LENGTH_SHORT).show();
            } else {
                ActivityCompat.requestPermissions(this, new String[]{permission}, PERMISSIONS_REQUEST_CODE);
            }
        } else {
            openFilePicker();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String permissions[], @NonNull int[] grantResults) {
        switch (requestCode) {
            case PERMISSIONS_REQUEST_CODE: {
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    openFilePicker();
                } else {
                    Toast.makeText(this, "Требуется разрешить доступ", Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    private void openFilePicker() {
        int code;

        switch (pos) {
            case 3:
                code = ALG_FILE_PICKER_REQUEST_CODE;
                break;
            case 4:
                code = FW_FILE_PICKER_REQUEST_CODE;
                break;
            default:
                pos = -1;
                dialogOnFlag = false;
                return;
        }

        new MaterialFilePicker()
                .withActivity(this)
                .withRequestCode(code)
                //.withFilter(Pattern.compile(".*\\.txt$")) // Filtering files and directories by file name using regexp
                //.withFilterDirectories(true) // Set directories filterable (false by default)
                .withHiddenFiles(true)
                .start();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == ALG_FILE_PICKER_REQUEST_CODE && resultCode == RESULT_OK) {
            String path = data.getStringExtra(FilePickerActivity.RESULT_FILE_PATH);

            if (path != null) {
                if (path.contains("alg.txt")) {
                    Toast.makeText(this, path, Toast.LENGTH_SHORT).show();

                    //ModbusReq.getInstance().destory();

                    Intent intent = new Intent(this, WriteFileActivity.class);
                    intent.putExtra("file_path", path);
                    intent.putExtra("device_ip", device_ip);
                    intent.putExtra("device_address", device_address);
                    intent.putExtra("app_mode", appMode);
                    startActivity(intent);
                } else {
                    Toast.makeText(this, "Ошибка выбора файла", Toast.LENGTH_SHORT).show();
                }
            }
        } else if (requestCode == FW_FILE_PICKER_REQUEST_CODE && resultCode == RESULT_OK) {
            String path = data.getStringExtra(FilePickerActivity.RESULT_FILE_PATH);

            if (path != null) {
                if (path.contains("logic.bin")) {
                    Toast.makeText(this, path, Toast.LENGTH_SHORT).show();

                    ModbusReq.getInstance().destory();

                    Intent intent = new Intent(this, WriteFileActivity.class);
                    intent.putExtra("file_path", path);
                    intent.putExtra("device_address", device_address);
                    intent.putExtra("app_mode", appMode);
                    startActivity(intent);
                } else {
                    Toast.makeText(this, "Ошибка выбора файла", Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            Toast.makeText(this, "Ошибка выбора файла", Toast.LENGTH_SHORT).show();
        }

        pos = -1;
        dialogOnFlag = false;
    }

    @Override
    protected void onStop() {
        super.onStop();

        if (myTimer1 != null) {
            myTimer1.cancel();
            myTimer1 = null;
        }

        if (myTimer2 != null) {
            myTimer2.cancel();
            myTimer2 = null;
        }

        /*if (netInitSuccessFlag) {
            ModbusReq.getInstance().destory();
            netInitSuccessFlag = false;
        }*/
    }

    @Override
    protected void onResume() {
        super.onResume();

        sPref = getSharedPreferences("MyPref", MODE_PRIVATE);

        sPhoneBook[0][0] = sPref.getString("CONTACT_NAME_1", "");
        sPhoneBook[0][1] = sPref.getString("CONTACT_NUMBER_1", "");
        sPhoneBook[1][0] = sPref.getString("CONTACT_NAME_2", "");
        sPhoneBook[1][1] = sPref.getString("CONTACT_NUMBER_2", "");
        sPhoneBook[2][0] = sPref.getString("CONTACT_NAME_3", "");
        sPhoneBook[2][1] = sPref.getString("CONTACT_NUMBER_3", "");
        sPhoneBook[3][0] = sPref.getString("CONTACT_NAME_4", "");
        sPhoneBook[3][1] = sPref.getString("CONTACT_NUMBER_4", "");
        sPhoneBook[4][0] = sPref.getString("CONTACT_NAME_5", "");
        sPhoneBook[4][1] = sPref.getString("CONTACT_NUMBER_5", "");
        sPhoneBook[5][0] = sPref.getString("CONTACT_NAME_6", "");
        sPhoneBook[5][1] = sPref.getString("CONTACT_NUMBER_6", "");
        sPhoneBook[6][0] = sPref.getString("CONTACT_NAME_7", "");
        sPhoneBook[6][1] = sPref.getString("CONTACT_NUMBER_7", "");
        sPhoneBook[7][0] = sPref.getString("CONTACT_NAME_8", "");
        sPhoneBook[7][1] = sPref.getString("CONTACT_NUMBER_8", "");
        sPhoneBook[8][0] = sPref.getString("CONTACT_NAME_9", "");
        sPhoneBook[8][1] = sPref.getString("CONTACT_NUMBER_9", "");
        sPhoneBook[9][0] = sPref.getString("CONTACT_NAME_10", "");
        sPhoneBook[9][1] = sPref.getString("CONTACT_NUMBER_10", "");

        if (myTimer1 != null) {

            myTimer1.cancel();
            myTimer1 = null;

        } else {

            //sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
            /*String sSSID = sPref.getString("SSID","");
            WifiInfo wifi_inf = wifiManager.getConnectionInfo();
            if (wifi_inf.getSSID() != sSSID) {
                List<WifiConfiguration> list = wifiManager.getConfiguredNetworks();
                for (WifiConfiguration i : list) {
                    if (i.SSID != null && i.SSID.equals("\"" + sSSID + "\"")) {

                        wifiManager.disableNetwork(wifi_inf.getNetworkId());

                        boolean isEnabled = wifiManager.enableNetwork(i.networkId, true);

                        break;
                    }
                }
            }*/
        }

        myTimer1 = new Timer();
        myTimer1.schedule(new TimerTask() {
            @Override
            public void run() {
                TimerMethod();
            }

        }, delay, period);
    }

    private void TimerMethod()
    {
        //This method is called directly by the timer
        //and runs in the same thread as the timer.

        //We call the method that will work with the UI
        //through the runOnUiThread method.
        this.runOnUiThread(Timer_Tick);
    }


    private Runnable Timer_Tick = new Runnable() {
        public void run() {

            //This method runs in the same thread as the UI.


            //Do something to the UI thread here
            if (type == 9 && (pos == 0 || pos == 1)) {
                pos = -1;
                dialogOnFlag = false;
            }

            if (!paramReadSuccessFlag) {
                wait_bar.setVisibility(View.VISIBLE);
            } else {
                wait_bar.setVisibility(View.INVISIBLE);
            }


            if (!netInitSuccessFlag) {

                ModbusReq.getInstance().destory();

                if (appMode == 1 || appMode == 2) {
                    ModbusReq.getInstance().setParam(new ModbusParam()
                            .setHost("10.10.100.254")
                            .setPort(Integer.parseInt(port_number))
                            .setEncapsulated(false)
                            .setKeepAlive(true)
                            .setTimeout(timeout)
                            .setRetries(0))
                            .init(onRequestBackModbusInit);
                }

                if (appMode == 3) {
                    ModbusReq.getInstance().setParam(new ModbusParam()
                            .setHost(device_ip)
                            .setPort(Integer.parseInt(port_number))
                            .setEncapsulated(false)
                            .setKeepAlive(true)
                            .setTimeout(timeout)
                            .setRetries(0))
                            .init(onRequestBackModbusInit);
                }

                wait_bar.setVisibility(View.VISIBLE);

                return;
            }


            switch (type) {
                case 1:
                    for (int i = 0; i < 49; i++) {
                        if (i == 48) {
                            mParameterList.clear();
                            break;
                        }

                        if (nInputRegistersData[i] != 0) {
                            if (mParameterList.size() == 0) {
                                for (int j = 0; j < 48; j++) {
                                    tempString2 = sp_names[nInputRegistersData[j]];
                                    if (nInputRegistersData[j] != 0) {
                                        mParameterList.add(new Parameter(tempString2, "0"));
                                    } else {
                                        for (int k = j+1; k < 48; k++) {
                                            if (nInputRegistersData[k] != 0) {
                                                mParameterList.add(new Parameter("Резерв", "-999"));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mParameterList.size() && i < nParValues.length; i++) {
                        if (mParameterList.get(i).getValue() != "-999")
                            mParameterList.get(i).setValue(Integer.toString(nParValues[i]));
                    }

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    if (!paramReadSuccessFlag2) {
                        ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,
                                device_address, 304, 48);
                    } else {
                        ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                                device_address, 2304, 48);
                    }

                    break;

                case 2:
                    for (int i = 0; i < 9; i++) {
                        if (i == 8) {
                            mParameterList.clear();
                            break;
                        }

                        if (nInputRegistersData[i] != 0) {
                            if (mParameterList.size() == 0) {
                                for (int j = 0; j < 8; j++) {
                                    tempString2 = reg_names[nInputRegistersData[j]];
                                    if (nInputRegistersData[j] != 0) {
                                        mParameterList.add(new Parameter("Xp " + tempString2, "0"));
                                        mParameterList.add(new Parameter("Ti " + tempString2, "0"));
                                        mParameterList.add(new Parameter("Kd " + tempString2, "0"));
                                    } else {
                                        for (int k = j+1; k < 8; k++) {
                                            if (nInputRegistersData[k] != 0) {
                                                mParameterList.add(new Parameter("Резерв", "-999"));
                                                mParameterList.add(new Parameter("Резерв", "-999"));
                                                mParameterList.add(new Parameter("Резерв", "-999"));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mParameterList.size() && i < nParValues.length; i++) {
                        if (mParameterList.get(i).getValue() != "-999")
                            mParameterList.get(i).setValue(Integer.toString(nParValues[i]));
                    }

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }


                    if (!paramReadSuccessFlag2) {
                        ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters, device_address, 368, 8);
                    } else {
                        ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                                device_address, 2560, 24);
                    }

                    break;

                case 3:
                    for (int i = 0; i < 33; i++) {
                        if (i == 32) {
                            mParameterList.clear();
                            break;
                        }

                        if (nInputRegistersData[i] != 0) {
                            if (mParameterList.size() == 0) {
                                for (int j = 0; j < 32; j++) {
                                    tempString2 = tm_names[nInputRegistersData[j]];
                                    if (nInputRegistersData[j] != 0) {
                                        mParameterList.add(new Parameter(tempString2, "0"));
                                    } else {
                                        for (int k = j+1; k < 32; k++) {
                                            if (nInputRegistersData[k] != 0) {
                                                mParameterList.add(new Parameter("Резерв", "-999"));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mParameterList.size() && i < nParValues.length; i++) {
                        if (mParameterList.get(i).getValue() != "-999")
                            mParameterList.get(i).setValue(Integer.toString(nParValues[i]));
                    }

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    if (!paramReadSuccessFlag2) {
                        ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters, device_address, 384, 32);
                    } else {
                        ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                                device_address, 2944, 32);
                    }

                    break;

                case 4:
                    mParameterList.clear();

                    for (int i = 0; i < bAlarmFlags.length; i++) {
                        if (bAlarmFlags[i]) {
                            mParameterList.add(new Parameter(sAlarmNames[nInputRegistersData[i]], "-999"));
                        }
                    }

                    if (mParameterList.size() == 0)
                        mParameterList.add(new Parameter("Нет текущих аварий", "-999"));

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    if (!paramReadSuccessFlag2) {
                        ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters, device_address, 416, 30);
                    } else {
                        ModbusReq.getInstance().readDiscreteInput(onRequestBackReadDiscreteInputs,
                                device_address, 304, 30);
                    }

                    break;

                case 5:
                    for (int i = 0; i < 9; i++) {
                        if (i == 8) {
                            mUiList.clear();
                            break;
                        }

                        if (nInputRegistersData[i + 16] != 0) {
                            if (mUiList.size() == 0) {
                                for (int j = 0; j < 8; j++) {
                                    tempString1 = "U" + String.valueOf(j+1) + ".";
                                    tempString2 = ui_names[nInputRegistersData[j + 16]];
                                    if (nInputRegistersData[j + 16] != 0) {
                                        mUiList.add(new UInput(tempString1 + tempString2,
                                                21, false, 25, 0, 0, -50, 150, 0));
                                    } else {
                                        for (int k = j+1; k < 8; k++) {
                                            if (nInputRegistersData[k + 16] != 0) {
                                                mUiList.add(new UInput(tempString1 + "Резерв",
                                                        -999, false, 0, 0, 0, 0, 0, 0));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mUiList.size(); i++) {
                        if (mUiList.get(i).getValue() != -999) {
                            if (mUiList.get(i).getSensor() != 4) {
                                mUiList.get(i).setValue(nInputRegistersData[i]);
                                mUiList.get(i).setHand_mode_value(nParValues[i]);
                                mUiList.get(i).setSensor(nParValues[i + 8]);
                                mUiList.get(i).setOffset(nParValues[i + 16]);
                                mUiList.get(i).setMax(nParValues[i + 24]);
                                mUiList.get(i).setMin(nParValues[i + 32]);
                                mUiList.get(i).setOffsetR(nParValues[i + 40]);

                                mUiList.get(i).setHand_mode(bParFlags[i]);
                            } else {
                                if (!bAlarmFlags[i])
                                    mUiList.get(i).setValue(0);
                                else
                                    mUiList.get(i).setValue(1);
                            }
                        }
                    }

                    if (paramReadSuccessFlag) {
                        ui_adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,device_address, 256, 24);
                    ModbusReq.getInstance().readDiscreteInput(onRequestBackReadDiscreteInputs, device_address, 256, 8);
                    ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,device_address, 16, 48);
                    ModbusReq.getInstance().readCoil(onRequestBackReadCoils,device_address, 256, 24);

                    break;

                case 6:
                    for (int i = 0; i < 9; i++) {
                        if (i == 8) {
                            mDiList.clear();
                            break;
                        }

                        if (nInputRegistersData[i] != 0) {
                            if (mDiList.size() == 0) {
                                for (int j = 0; j < 8; j++) {
                                    tempString1 = "D" + String.valueOf(j+1) + ".";
                                    tempString2 = di_names[nInputRegistersData[j]];
                                    if (nInputRegistersData[j] != 0) {
                                        mDiList.add(new DInput(tempString1 + tempString2, 0, false, 0, false));
                                    } else {
                                        for (int k = j+1; k < 8; k++) {
                                            if (nInputRegistersData[k] != 0) {
                                                mDiList.add(new DInput(tempString1 + "Резерв", -999, false, 0, false));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mDiList.size(); i++) {
                        if (mDiList.get(i).getState() != -999) {
                            if (!bAlarmFlags[i])
                                mDiList.get(i).setState(0);
                            else
                                mDiList.get(i).setState(1);

                            mDiList.get(i).setHand_mode(bParFlags[i]);

                            if (!bParFlags[i+8])
                                mDiList.get(i).setHand_mode_state(0);
                            else
                                mDiList.get(i).setHand_mode_state(1);

                            mDiList.get(i).setInversion(bParFlags[i+16]);
                        }
                    }

                    if (paramReadSuccessFlag) {
                        di_adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readDiscreteInput(onRequestBackReadDiscreteInputs,device_address, 288, 8);
                    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,device_address, 280, 8);
                    ModbusReq.getInstance().readCoil(onRequestBackReadCoils,device_address, 384, 24);

                    break;

                case 7:
                    for (int i = 0; i < 5; i++) {
                        if (i == 4) {
                            mAoList.clear();
                            break;
                        }

                        if (nInputRegistersData[i + 4] != 0) {
                            if (mAoList.size() == 0) {
                                for (int j = 0; j < 4; j++) {
                                    tempString1 = "Y" + String.valueOf(j+1) + ".";
                                    tempString2 = ao_names[nInputRegistersData[j + 4]];
                                    if (nInputRegistersData[j + 4] != 0) {
                                        mAoList.add(new AOutput(tempString1 + tempString2, 0, false, 0, false, 0, 0));
                                    } else {
                                        for (int k = j+1; k < 4; k++) {
                                            if (nInputRegistersData[k + 4] != 0) {
                                                mAoList.add(new AOutput(tempString1 + "Резерв", -999, false, 0, false, 0, 0));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mAoList.size(); i++) {
                        if (mAoList.get(i).getValue() != -999) {
                            mAoList.get(i).setValue(nInputRegistersData[i]);
                            mAoList.get(i).setHand_mode_value(nParValues[i]);
                            mAoList.get(i).setMax(nParValues[i+8]);
                            mAoList.get(i).setMin(nParValues[i+12]);

                            mAoList.get(i).setHand_mode(bParFlags[i]);
                            mAoList.get(i).setInversion(bParFlags[i+4]);
                        }
                    }

                    if (paramReadSuccessFlag) {
                        ao_adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,device_address, 264, 8);
                    ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,device_address, 256, 16);
                    ModbusReq.getInstance().readCoil(onRequestBackReadCoils,device_address, 288, 8);

                    break;

                case 8:
                    for (int i = 0; i < 11; i++) {
                        if (i == 10) {
                            mDoList.clear();
                            break;
                        }

                        if (nInputRegistersData[i] != 0) {
                            if (mDoList.size() == 0) {
                                for (int j = 0; j < 10; j++) {
                                    tempString1 = "Q" + String.valueOf(j+1) + ".";
                                    tempString2 = do_names[nInputRegistersData[j]];
                                    if (nInputRegistersData[j] != 0) {
                                        mDoList.add(new DOutput(tempString1 + tempString2, 0, false, 0, false));
                                    } else {
                                        for (int k = j+1; k < 10; k++) {
                                            if (nInputRegistersData[k] != 0) {
                                                mDoList.add(new DOutput(tempString1 + "Резерв", -999, false, 0, false));
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }

                    for (int i = 0; i < mDoList.size(); i++) {
                        if (mDoList.get(i).getState() != -999) {
                            if (!bAlarmFlags[i])
                                mDoList.get(i).setState(0);
                            else
                                mDoList.get(i).setState(1);

                            mDoList.get(i).setHand_mode(bParFlags[i]);

                            if (!bParFlags[i+16])
                                mDoList.get(i).setHand_mode_state(0);
                            else
                                mDoList.get(i).setHand_mode_state(1);

                            mDoList.get(i).setInversion(bParFlags[i+48]);
                        }
                    }

                    if (paramReadSuccessFlag) {
                        do_adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readDiscreteInput(onRequestBackReadDiscreteInputs, device_address, 264, 10);
                    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters, device_address, 288, 10);
                    ModbusReq.getInstance().readCoil(onRequestBackReadCoils, device_address, 320, 64);

                    break;

                case 9:
                    mParameterList.clear();

                    // add data for list
                    mParameterList.add(new Parameter("Установить дату", "01.01.2018"));
                    mParameterList.add(new Parameter("Установить время", "00:00"));
                    mParameterList.add(new Parameter("Установить день недели", "Пн"));
                    mParameterList.add(new Parameter("Временная программа 1", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                    mParameterList.add(new Parameter("Временная программа 2", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                    mParameterList.add(new Parameter("Временная программа 3", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));

                    //sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
                    //if (sPref.getBoolean("TIME_DATE_AUTO_ADJUSTMENT", false)) {
                        //mParameterList.add(new Parameter("Автоматическая коррекция даты и времени", "Включено"));
                    //} else {
                        mParameterList.add(new Parameter("Автоматическая коррекция даты и времени", "Отключено"));
                    //}

                    if (device_algorithm == 10203 || device_algorithm == 133) {
                        mParameterList.add(new Parameter("Временная программа 4", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));

                        if (device_algorithm == 133)
                            mParameterList.add(new Parameter("Временная программа 5", "вкл 00:00:00 / откл 00:00:00 / Пн Вт Ср Чт Пт Сб Вс / неактивна"));
                    }

                    // текущая дата
                    year = 2000 + nParValues[6];
                    month = nParValues[5];
                    date = nParValues[4];

                    tempString1 = Integer.toString(date);
                    if (tempString1.length() == 1)
                        tempString1 = "0" + tempString1;
                    tempString2 = Integer.toString(month);
                    if (tempString2.length() == 1)
                        tempString2 = "0" + tempString2;
                    tempString3 = Integer.toString(year);
                    mParameterList.get(0).setValue(tempString1 + "." + tempString2 + "." + tempString3);

                    // текущее время
                    hours = nParValues[2];
                    minutes = nParValues[1];

                    tempString1 = Integer.toString(hours);
                    if (tempString1.length() == 1)
                        tempString1 = "0" + tempString1;
                    tempString2 = Integer.toString(minutes);
                    if (tempString2.length() == 1)
                        tempString2 = "0" + tempString2;
                    mParameterList.get(1).setValue(tempString1 + ":" + tempString2);

                    // День недели
                    weekday = nParValues[3];
                    if (weekday < 1 || weekday > 7)
                        weekday = 0;
                    mParameterList.get(2).setValue(wd_rus[weekday]);

                    // временная программа 1
                    timeProgram[0].setHour_on(nParValues[9]);
                    timeProgram[0].setMin_on(nParValues[8]);
                    timeProgram[0].setSec_on(nParValues[7]);
                    timeProgram[0].setHour_off(nParValues[12]);
                    timeProgram[0].setMin_off(nParValues[11]);
                    timeProgram[0].setSec_off(nParValues[10]);
                    tempString1 = Integer.toString(nParValues[9]);
                    if (tempString1.length() == 1)
                        tempString1 = "0" + tempString1;
                    tempString2 = Integer.toString(nParValues[8]);
                    if (tempString2.length() == 1)
                        tempString2 = "0" + tempString2;
                    tempString3 = Integer.toString(nParValues[7]);
                    if (tempString3.length() == 1)
                        tempString3 = "0" + tempString3;
                    tempString4 = Integer.toString(nParValues[12]);
                    if (tempString4.length() == 1)
                        tempString4 = "0" + tempString4;
                    tempString5 = Integer.toString(nParValues[11]);
                    if (tempString5.length() == 1)
                        tempString5 = "0" + tempString5;
                    tempString6 = Integer.toString(nParValues[10]);
                    if (tempString6.length() == 1)
                        tempString6 = "0" + tempString6;

                    timeProgram[0].setWeekdays(nParValues[13]);

                    tempString7 = "";
                    if ((nParValues[13] & 0x01) != 0)
                        tempString7 += "Пн ";
                    if ((nParValues[13] & 0x02) != 0)
                        tempString7 += "Вт ";
                    if ((nParValues[13] & 0x04) != 0)
                        tempString7 += "Ср ";
                    if ((nParValues[13] & 0x08) != 0)
                        tempString7 += "Чт ";
                    if ((nParValues[13] & 0x10) != 0)
                        tempString7 += "Пт ";
                    if ((nParValues[13] & 0x20) != 0)
                        tempString7 += "Сб ";
                    if ((nParValues[13] & 0x40) != 0)
                        tempString7 += "Вс ";

                    if ((nParValues[14] & 0x01) != 0) {
                        tempString8 = "активна";
                        timeProgram[0].setEnabled(true);
                    } else {
                        tempString8 = "неактивна";
                        timeProgram[0].setEnabled(false);
                    }

                    mParameterList.get(3).setValue("вкл " + tempString1 + ":" + tempString2 + ":" + tempString3 +
                        " / откл " + tempString4 + ":" + tempString5 + ":" + tempString6 + " / " + tempString7 + " / " + tempString8);


                    // временная программа 2
                    timeProgram[1].setHour_on(nParValues[25]);
                    timeProgram[1].setMin_on(nParValues[24]);
                    timeProgram[1].setSec_on(nParValues[23]);
                    timeProgram[1].setHour_off(nParValues[28]);
                    timeProgram[1].setMin_off(nParValues[27]);
                    timeProgram[1].setSec_off(nParValues[26]);
                    tempString1 = Integer.toString(nParValues[25]);
                    if (tempString1.length() == 1)
                        tempString1 = "0" + tempString1;
                    tempString2 = Integer.toString(nParValues[24]);
                    if (tempString2.length() == 1)
                        tempString2 = "0" + tempString2;
                    tempString3 = Integer.toString(nParValues[23]);
                    if (tempString3.length() == 1)
                        tempString3 = "0" + tempString3;
                    tempString4 = Integer.toString(nParValues[28]);
                    if (tempString4.length() == 1)
                        tempString4 = "0" + tempString4;
                    tempString5 = Integer.toString(nParValues[27]);
                    if (tempString5.length() == 1)
                        tempString5 = "0" + tempString5;
                    tempString6 = Integer.toString(nParValues[26]);
                    if (tempString6.length() == 1)
                        tempString6 = "0" + tempString6;

                    timeProgram[1].setWeekdays(nParValues[29]);

                    tempString7 = "";
                    if ((nParValues[29] & 0x01) != 0)
                        tempString7 += "Пн ";
                    if ((nParValues[29] & 0x02) != 0)
                        tempString7 += "Вт ";
                    if ((nParValues[29] & 0x04) != 0)
                        tempString7 += "Ср ";
                    if ((nParValues[29] & 0x08) != 0)
                        tempString7 += "Чт ";
                    if ((nParValues[29] & 0x10) != 0)
                        tempString7 += "Пт ";
                    if ((nParValues[29] & 0x20) != 0)
                        tempString7 += "Сб ";
                    if ((nParValues[29] & 0x40) != 0)
                        tempString7 += "Вс ";

                    if ((nParValues[30] & 0x01) != 0) {
                        tempString8 = "активна";
                        timeProgram[1].setEnabled(true);
                    } else {
                        tempString8 = "неактивна";
                        timeProgram[1].setEnabled(false);
                    }

                    mParameterList.get(4).setValue("вкл " + tempString1 + ":" + tempString2 + ":" + tempString3 +
                            " / откл " + tempString4 + ":" + tempString5 + ":" + tempString6 + " / " + tempString7 + " / " + tempString8);



                    // временная программа 2
                    timeProgram[2].setHour_on(nParValues[41]);
                    timeProgram[2].setMin_on(nParValues[40]);
                    timeProgram[2].setSec_on(nParValues[39]);
                    timeProgram[2].setHour_off(nParValues[44]);
                    timeProgram[2].setMin_off(nParValues[43]);
                    timeProgram[2].setSec_off(nParValues[42]);
                    tempString1 = Integer.toString(nParValues[41]);
                    if (tempString1.length() == 1)
                        tempString1 = "0" + tempString1;
                    tempString2 = Integer.toString(nParValues[40]);
                    if (tempString2.length() == 1)
                        tempString2 = "0" + tempString2;
                    tempString3 = Integer.toString(nParValues[39]);
                    if (tempString3.length() == 1)
                        tempString3 = "0" + tempString3;
                    tempString4 = Integer.toString(nParValues[44]);
                    if (tempString4.length() == 1)
                        tempString4 = "0" + tempString4;
                    tempString5 = Integer.toString(nParValues[43]);
                    if (tempString5.length() == 1)
                        tempString5 = "0" + tempString5;
                    tempString6 = Integer.toString(nParValues[42]);
                    if (tempString6.length() == 1)
                        tempString6 = "0" + tempString6;

                    timeProgram[2].setWeekdays(nParValues[45]);

                    tempString7 = "";
                    if ((nParValues[45] & 0x01) != 0)
                        tempString7 += "Пн ";
                    if ((nParValues[45] & 0x02) != 0)
                        tempString7 += "Вт ";
                    if ((nParValues[45] & 0x04) != 0)
                        tempString7 += "Ср ";
                    if ((nParValues[45] & 0x08) != 0)
                        tempString7 += "Чт ";
                    if ((nParValues[45] & 0x10) != 0)
                        tempString7 += "Пт ";
                    if ((nParValues[45] & 0x20) != 0)
                        tempString7 += "Сб ";
                    if ((nParValues[45] & 0x40) != 0)
                        tempString7 += "Вс ";

                    if ((nParValues[46] & 0x01) != 0) {
                        tempString8 = "активна";
                        timeProgram[2].setEnabled(true);
                    } else {
                        tempString8 = "неактивна";
                        timeProgram[2].setEnabled(false);
                    }

                    mParameterList.get(5).setValue("вкл " + tempString1 + ":" + tempString2 + ":" + tempString3 +
                            " / откл " + tempString4 + ":" + tempString5 + ":" + tempString6 + " / " + tempString7 + " / " + tempString8);


                    sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
                    if (sPref.getBoolean("TIME_DATE_AUTO_ADJUSTMENT", false)) {
                        mParameterList.get(6).setValue("Включено");
                    } else {
                        mParameterList.get(6).setValue("Отключено");
                    }


                    if (device_algorithm == 10203 || device_algorithm == 133) {
                        // временная программа 4
                        timeProgramExtra[0].setHour_on(nParValues[57]);
                        timeProgramExtra[0].setMin_on(nParValues[56]);
                        timeProgramExtra[0].setSec_on(nParValues[55]);
                        timeProgramExtra[0].setHour_off(nParValues[60]);
                        timeProgramExtra[0].setMin_off(nParValues[59]);
                        timeProgramExtra[0].setSec_off(nParValues[58]);
                        tempString1 = Integer.toString(nParValues[57]);
                        if (tempString1.length() == 1)
                            tempString1 = "0" + tempString1;
                        tempString2 = Integer.toString(nParValues[56]);
                        if (tempString2.length() == 1)
                            tempString2 = "0" + tempString2;
                        tempString3 = Integer.toString(nParValues[55]);
                        if (tempString3.length() == 1)
                            tempString3 = "0" + tempString3;
                        tempString4 = Integer.toString(nParValues[60]);
                        if (tempString4.length() == 1)
                            tempString4 = "0" + tempString4;
                        tempString5 = Integer.toString(nParValues[59]);
                        if (tempString5.length() == 1)
                            tempString5 = "0" + tempString5;
                        tempString6 = Integer.toString(nParValues[58]);
                        if (tempString6.length() == 1)
                            tempString6 = "0" + tempString6;

                        timeProgramExtra[0].setWeekdays(nParValues[61]);

                        tempString7 = "";
                        if ((nParValues[61] & 0x01) != 0)
                            tempString7 += "Пн ";
                        if ((nParValues[61] & 0x02) != 0)
                            tempString7 += "Вт ";
                        if ((nParValues[61] & 0x04) != 0)
                            tempString7 += "Ср ";
                        if ((nParValues[61] & 0x08) != 0)
                            tempString7 += "Чт ";
                        if ((nParValues[61] & 0x10) != 0)
                            tempString7 += "Пт ";
                        if ((nParValues[61] & 0x20) != 0)
                            tempString7 += "Сб ";
                        if ((nParValues[61] & 0x40) != 0)
                            tempString7 += "Вс ";

                        if ((nParValues[61] & 0x01) != 0) {
                            tempString8 = "активна";
                            timeProgramExtra[0].setEnabled(true);
                        } else {
                            tempString8 = "неактивна";
                            timeProgramExtra[0].setEnabled(false);
                        }

                        mParameterList.get(7).setValue("вкл " + tempString1 + ":" + tempString2 + ":" + tempString3 +
                                " / откл " + tempString4 + ":" + tempString5 + ":" + tempString6 + " / " + tempString7 + " / " + tempString8);
                    }


                        // временная программа 5
                        if (device_algorithm == 133) {
                            timeProgramExtra[1].setHour_on(nParValues[73]);
                            timeProgramExtra[1].setMin_on(nParValues[72]);
                            timeProgramExtra[1].setSec_on(nParValues[71]);
                            timeProgramExtra[1].setHour_off(nParValues[76]);
                            timeProgramExtra[1].setMin_off(nParValues[75]);
                            timeProgramExtra[1].setSec_off(nParValues[74]);
                            tempString1 = Integer.toString(nParValues[73]);
                            if (tempString1.length() == 1)
                                tempString1 = "0" + tempString1;
                            tempString2 = Integer.toString(nParValues[72]);
                            if (tempString2.length() == 1)
                                tempString2 = "0" + tempString2;
                            tempString3 = Integer.toString(nParValues[71]);
                            if (tempString3.length() == 1)
                                tempString3 = "0" + tempString3;
                            tempString4 = Integer.toString(nParValues[76]);
                            if (tempString4.length() == 1)
                                tempString4 = "0" + tempString4;
                            tempString5 = Integer.toString(nParValues[75]);
                            if (tempString5.length() == 1)
                                tempString5 = "0" + tempString5;
                            tempString6 = Integer.toString(nParValues[74]);
                            if (tempString6.length() == 1)
                                tempString6 = "0" + tempString6;

                            timeProgramExtra[1].setWeekdays(nParValues[77]);

                            tempString7 = "";
                            if ((nParValues[77] & 0x01) != 0)
                                tempString7 += "Пн ";
                            if ((nParValues[77] & 0x02) != 0)
                                tempString7 += "Вт ";
                            if ((nParValues[77] & 0x04) != 0)
                                tempString7 += "Ср ";
                            if ((nParValues[77] & 0x08) != 0)
                                tempString7 += "Чт ";
                            if ((nParValues[77] & 0x10) != 0)
                                tempString7 += "Пт ";
                            if ((nParValues[77] & 0x20) != 0)
                                tempString7 += "Сб ";
                            if ((nParValues[77] & 0x40) != 0)
                                tempString7 += "Вс ";

                            if ((nParValues[77] & 0x01) != 0) {
                                tempString8 = "активна";
                                timeProgramExtra[1].setEnabled(true);
                            } else {
                                tempString8 = "неактивна";
                                timeProgramExtra[1].setEnabled(false);
                            }

                            mParameterList.get(8).setValue("вкл " + tempString1 + ":" + tempString2 + ":" + tempString3 +
                                    " / откл " + tempString4 + ":" + tempString5 + ":" + tempString6 + " / " + tempString7 + " / " + tempString8);
                        }

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                            device_address, 3705, nParValues.length);

                    break;

                case 10:
                    mParameterList.clear();

                    // add data for list
                    mParameterList.add(new Parameter("Название", "Без названия"));
                    mParameterList.add(new Parameter("Серийный номер", "0"));
                    mParameterList.add(new Parameter("Modbus адрес", "2"));
                    mParameterList.add(new Parameter("Номер алгоритма", "100"));
                    mParameterList.add(new Parameter("Версия прошивки", "8.6"));

                    //mParameterList.add(new Parameter("Имя WiFi сети", "OTLogic-XXX"));
                    //mParameterList.add(new Parameter("Пароль WiFi сети", "911911911"));
                    //mParameterList.add(new Parameter("Порт Modbus", "8899"));

                    mParameterList.add(new Parameter("Рассылка SMS об авариях", "Откл"));
                    mParameterList.add(new Parameter("RS-485 Second Slave", "Откл"));
                    mParameterList.add(new Parameter("Пароль уровня 1 (0-32767)", "111"));
                    mParameterList.add(new Parameter("Пароль уровня 2 (0-32767)", "222"));
                    mParameterList.add(new Parameter("Пароль уровня 3 (0-32767)", "911"));
                    mParameterList.add(new Parameter("Доступ на уровень 1 без авторизации", "Откл"));
                    mParameterList.add(new Parameter("Перезагрузка оператором", "Нажмите для перезагрузки"));
                    mParameterList.add(new Parameter("Возврат заводских настроек", "Нажмите для возврата"));

                    for (int i = 12; i < 32; i++) {
                        symbolArray[i-12] = (byte) nInputRegistersData[i];
                    }

                    tempString1 = EncodingUtils.getString(symbolArray, "windows-1251");
                    mParameterList.get(0).setValue(tempString1);
                    mParameterList.get(1).setValue(Integer.toHexString(nInputRegistersData[6]) + Integer.toHexString(nInputRegistersData[5]) +
                            Integer.toHexString(nInputRegistersData[4]) + Integer.toHexString(nInputRegistersData[3]) +
                            Integer.toHexString(nInputRegistersData[2]) + Integer.toHexString(nInputRegistersData[1]));
                    mParameterList.get(2).setValue(Integer.toString(nInputRegistersData[0]));

                    int version = 1;
                    int alg = nInputRegistersData[9]/100;
                    if (alg < 100) alg = nInputRegistersData[9];
                    else version = nInputRegistersData[9] - alg*100;
                    mParameterList.get(3).setValue(Integer.toString(alg) + " v." + Integer.toString(version));
                    mParameterList.get(4).setValue(Integer.toString(nInputRegistersData[10]) + "." + Integer.toString(nInputRegistersData[11]));






                    sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
                    if (sPref.getBoolean("ALARM_SMS_FLAG", false)) {
                        mParameterList.get(5).setValue("Вкл");
                    } else {
                        mParameterList.get(5).setValue("Откл");
                    }

                    if (bParFlags[0]) {
                        mParameterList.get(6).setValue("Вкл");
                    } else {
                        mParameterList.get(6).setValue("Откл");
                    }

                    mParameterList.get(7).setValue(Integer.toString(nParValues[0]));
                    mParameterList.get(8).setValue(Integer.toString(nParValues[1]));
                    mParameterList.get(9).setValue(Integer.toString(nParValues[2]));

                    if (sPref.getBoolean("LOW_LEVEL_FREE_ACCESS_MODE", false)) {
                        mParameterList.get(10).setValue("Вкл");
                    } else {
                        mParameterList.get(10).setValue("Откл");
                    }


                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters, device_address, 0, 32);
                    ModbusReq.getInstance().readCoil(onRequestBackReadCoils, device_address, 6, 1);
                    ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters, device_address, 7, 3);
                    break;

                case 11:
                    // cascade flag
                    if (nParValues[16] == 0) {
                        mConfigParamList.get(1).setEnabled(false);
                    } else {
                        mConfigParamList.get(1).setEnabled(true);
                    }

                    if (paramReadSuccessFlag) {
                        configListAdaptor.notifyDataSetChanged();
                    }

                    ModbusReq.getInstance().readHoldingRegisters(onRequestBackReadHoldingRegisters,
                            device_address, 3072, ram_array_size);

                    break;

                case 12:
                    mParameterList.clear();

                    for (int i = 0; i < sPhoneBook.length; i++) {
                        if (!sPhoneBook[i][1].isEmpty())
                            mParameterList.add(new Parameter(sPhoneBook[i][0], sPhoneBook[i][1]));
                    }

                    if (mParameterList.size() == 0)
                        mParameterList.add(new Parameter("Список контактов пуст", "-999"));

                    adapter.notifyDataSetChanged();

                    break;

                case 13:
                    if (alarm_jornal_refresh) {
                        //if (appMode != 2) {
                            ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,
                                    device_address, 1024 + alarm_jornal_pointer*8, alarm_jornal_size);
                        //}
                        alarm_jornal_refresh = false;
                        break;
                    }

                    mParameterList.clear();

                    for (int i = 0; i < 10; i++) {
                        if (nInputRegistersData[i * 8] != 0xff && nInputRegistersData[i * 8] != 0 && nInputRegistersData[i * 8] < sAlarmNames.length) {
                            tempString1 = "";
                            if (nInputRegistersData[i * 8 + 1] == 1)
                                tempString1 += "Установлена ";
                            else
                                tempString1 += "Сброшена ";

                            seconds = nInputRegistersData[i * 8 + 2];
                            minutes = nInputRegistersData[i * 8 + 3];
                            hours = nInputRegistersData[i * 8 + 4];
                            date = nInputRegistersData[i * 8 + 5];
                            month = nInputRegistersData[i * 8 + 6];
                            year = nInputRegistersData[i * 8 + 7];

                            tempString2 = Integer.toString(date);
                            if (tempString2.length() == 1)
                                tempString2 = "0" + tempString2;
                            tempString3 = Integer.toString(month);
                            if (tempString3.length() == 1)
                                tempString3 = "0" + tempString3;
                            tempString4 = Integer.toString(year);

                            tempString1 += tempString2 + "." + tempString3 + "." + tempString4;

                            tempString2 = Integer.toString(hours);
                            if (tempString2.length() == 1)
                                tempString2 = "0" + tempString2;
                            tempString3 = Integer.toString(minutes);
                            if (tempString3.length() == 1)
                                tempString3 = "0" + tempString3;
                            tempString4 = Integer.toString(seconds);
                            if (tempString4.length() == 1)
                                tempString4 = "0" + tempString4;

                            tempString1 += "  " + tempString2 + "." + tempString3 + "." + tempString4;

                            mParameterList.add(new Parameter(sAlarmNames[nInputRegistersData[i * 8]], tempString1));

                            if (mParameterList.size() == 10) {
                                alarm_jornal_page_full = true;
                                mParameterList.add(new Parameter("еще...", "-999"));
                                alarm_jornal_pos = 10;
                            }
                        } else {
                            alarm_jornal_page_full = false;
                            mParameterList.add(new Parameter("еще...", "-999"));
                            alarm_jornal_pos = i;
                            break;
                        }
                    }

                    if (mParameterList.size() == 0)
                        mParameterList.add(new Parameter("Журнал аварий пуст", "-999"));

                    if (paramReadSuccessFlag) {
                        adapter.notifyDataSetChanged();
                    }

                    if (appMode != 2) {
                        ModbusReq.getInstance().readInputRegisters(onRequestBackReadInputRegisters,
                                device_address, 1024 + alarm_jornal_pointer*8, alarm_jornal_size);
                    }

                    break;
            }
        }
    };

    @Override
    public void applyNewValue(int newValue) {

        if (newValue != 65535) {
            switch (type) {
                case 1:
                    if (newValue < -5000 || newValue > 5000) {
                        Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                    } else {
                        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                device_address, 2304 + pos, newValue);
                    }
                    break;
                case 2:
                    if (newValue < 0 || newValue > 9999) {
                        Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                    } else {
                        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                device_address, 2560 + pos, newValue);
                    }
                    break;
                case 3:
                    if (newValue < 0 || newValue > 32000) {
                        Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                    } else {
                        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                device_address, 2944 + pos, newValue);
                    }
                    break;
                case 10:
                    if (pos == 2) {
                        if (newValue < 2 || newValue > 21) {
                            Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                        } else {
                            ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                    device_address, 6, newValue);
                        }
                    } else {
                        if (newValue < 0 || newValue > 32000) {
                            Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                        } else {
                            ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                    device_address, pos, newValue);
                        }
                    }

                    break;
                default:
                    break;
            }
        }
        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyNewUiParamValues(int newHandModeValue, int newMaxValue, int newMinValue, boolean newHandMode, int newOffsetValue, int newSensor) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (newHandModeValue != 65535) {

            if (newHandModeValue != nParValues[pos]) {
                if (newHandModeValue < -5000 || newHandModeValue > 5000) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 16 + pos, newHandModeValue);
                }
            }

            if (newSensor != nParValues[pos + 8] && nParValues[pos + 8] != 4) {
                if (Integer.parseInt(device_id) < 1200) {
                    if (newSensor < 0 || newSensor > 5) {
                        Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                    } else {
                        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                device_address, 24 + pos, newSensor);
                    }
                } else {
                    if (newSensor < 10 || newSensor > 15) {
                        Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                    } else {
                        ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                                device_address, 24 + pos, newSensor);
                    }
                }
            }

            if (newOffsetValue != nParValues[pos + 16]) {
                if (newOffsetValue < -50 || newOffsetValue > 50) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 32 + pos, newOffsetValue);
                }
            }

            if (newMinValue != nParValues[pos + 32]) {
                if (newMinValue < -5000 || newMinValue > 5000) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 48 + pos, newMinValue);
                }
            }

            if (newMaxValue != nParValues[pos + 24]) {
                if (newMaxValue < -5000 || newMaxValue > 5000) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 40 + pos, newMaxValue);
                }
            }

            if (newHandMode != bParFlags[pos]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 256 + pos, newHandMode);
            }
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyNewDiParamValues(boolean newHandModeState, boolean newHandMode, boolean newInversion, boolean dump) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (!dump) {

            if (newHandModeState != bParFlags[pos + 8]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 392 + pos, newHandModeState);
            }

            if (newHandMode != bParFlags[pos]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 384 + pos, newHandMode);
            }

            if (newInversion != bParFlags[pos + 16]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 400 + pos, newInversion);
            }
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyNewAoParamValues(int newHandModeValue, int newMaxValue, int newMinValue, boolean newHandMode, boolean newInversion) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (newHandModeValue != 65535) {

            if (newHandModeValue != nParValues[pos]) {
                if (newHandModeValue < 0 || newHandModeValue > 100) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 256 + pos, newHandModeValue);
                }
            }

            if (newMinValue != nParValues[pos + 12]) {
                if (newMinValue < -100 || newMinValue > 100) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 268 + pos, newMinValue);
                }
            }

            if (newMaxValue != nParValues[pos + 8]) {
                if (newMaxValue < 0 || newMaxValue > 100) {
                    Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                } else {
                    ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                            device_address, 264 + pos, newMaxValue);
                }
            }

            if (newHandMode != bParFlags[pos]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 288 + pos, newHandMode);
            }

            if (newInversion != bParFlags[pos + 4]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 292 + pos, newInversion);
            }
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyNewDoParamValues(boolean newHandModeState, boolean newHandMode, boolean newInversion, boolean dump) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (!dump) {

            if (newHandModeState != bParFlags[pos + 16]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 336 + pos, newHandModeState);
            }

            if (newHandMode != bParFlags[pos]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 320 + pos, newHandMode);
            }

            if (newInversion != bParFlags[pos + 48]) {
                ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                        device_address, 368 + pos, newInversion);
            }
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyTexts(String result) {
        if (result == "ok" /*&& appMode != 2*/ && type == 4) {
            ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                    device_address, 0, true);

            Toast.makeText(getApplicationContext(), "Сброс текущих аварий...", Toast.LENGTH_SHORT).show();
        }

        if (result == "ok" /*&& appMode != 2*/ && type == 13) {
            ModbusReq.getInstance().writeCoil(onRequestBackWriteCoil,
                    device_address, 5, true);

            Toast.makeText(getApplicationContext(), "Очистка журнала аварий...", Toast.LENGTH_SHORT).show();
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyContactDeleteTexts(String result) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (result == "ok") {

            for (int i = 0, j = 0; i < sPhoneBook.length; i++) {
                if (!sPhoneBook[i][1].isEmpty()) {
                    if (j == pos) {
                        sPhoneBook[i][0] = "";
                        sPhoneBook[i][1] = "";
                        pos = i;
                        break;
                    }
                    j++;
                }

                if (i == sPhoneBook.length-1) {
                    pos = -1;
                    dialogOnFlag = false;
                    Toast.makeText(getApplicationContext(), "Ошибка", Toast.LENGTH_SHORT).show();
                    return;
                }
            }

            sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
            SharedPreferences.Editor ed = sPref.edit();

            switch (pos) {
                case 0:
                    ed.putString("CONTACT_NAME_1", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_1", sPhoneBook[pos][1]);
                    break;
                case 1:
                    ed.putString("CONTACT_NAME_2", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_2", sPhoneBook[pos][1]);
                    break;
                case 2:
                    ed.putString("CONTACT_NAME_3", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_3", sPhoneBook[pos][1]);
                    break;
                case 3:
                    ed.putString("CONTACT_NAME_4", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_4", sPhoneBook[pos][1]);
                    break;
                case 4:
                    ed.putString("CONTACT_NAME_5", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_5", sPhoneBook[pos][1]);
                    break;
                case 5:
                    ed.putString("CONTACT_NAME_6", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_6", sPhoneBook[pos][1]);
                    break;
                case 6:
                    ed.putString("CONTACT_NAME_7", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_7", sPhoneBook[pos][1]);
                    break;
                case 7:
                    ed.putString("CONTACT_NAME_8", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_8", sPhoneBook[pos][1]);
                    break;
                case 8:
                    ed.putString("CONTACT_NAME_9", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_9", sPhoneBook[pos][1]);
                    break;
                case 9:
                    ed.putString("CONTACT_NAME_10", sPhoneBook[pos][0]);
                    ed.putString("CONTACT_NUMBER_10", sPhoneBook[pos][1]);
                    break;
                default:
                    pos = -1;
                    dialogOnFlag = false;
                    Toast.makeText(getApplicationContext(), "Ошибка", Toast.LENGTH_SHORT).show();
                    return;
            }
            ed.commit();

            Toast.makeText(getApplicationContext(), "Контакт удален", Toast.LENGTH_SHORT).show();
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void applyContactAddTexts(String name, String number) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (!name.isEmpty() && !number.isEmpty()) {
            sPref = getSharedPreferences("MyPref", MODE_PRIVATE);
            SharedPreferences.Editor ed = sPref.edit();

            sPhoneBook[pos][0] = name;
            sPhoneBook[pos][1] = number;

            switch (pos) {
                case 0:
                    ed.putString("CONTACT_NAME_1", name);
                    ed.putString("CONTACT_NUMBER_1", number);
                    break;
                case 1:
                    ed.putString("CONTACT_NAME_2", name);
                    ed.putString("CONTACT_NUMBER_2", number);
                    break;
                case 2:
                    ed.putString("CONTACT_NAME_3", name);
                    ed.putString("CONTACT_NUMBER_3", number);
                    break;
                case 3:
                    ed.putString("CONTACT_NAME_4", name);
                    ed.putString("CONTACT_NUMBER_4", number);
                    break;
                case 4:
                    ed.putString("CONTACT_NAME_5", name);
                    ed.putString("CONTACT_NUMBER_5", number);
                    break;
                case 5:
                    ed.putString("CONTACT_NAME_6", name);
                    ed.putString("CONTACT_NUMBER_6", number);
                    break;
                case 6:
                    ed.putString("CONTACT_NAME_7", name);
                    ed.putString("CONTACT_NUMBER_7", number);
                    break;
                case 7:
                    ed.putString("CONTACT_NAME_8", name);
                    ed.putString("CONTACT_NUMBER_8", number);
                    break;
                case 8:
                    ed.putString("CONTACT_NAME_9", name);
                    ed.putString("CONTACT_NUMBER_9", number);
                    break;
                case 9:
                    ed.putString("CONTACT_NAME_10", name);
                    ed.putString("CONTACT_NUMBER_10", number);
                    break;
            }
            ed.commit();

            Toast.makeText(getApplicationContext(), "Контакт добавлен", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(getApplicationContext(), "Некорректные данные", Toast.LENGTH_SHORT).show();
        }

        pos = -1;

        dialogOnFlag = false;
    }

    @Override
    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {

        short[] ar = new short[2];
        ar[0] = (short) minute;
        ar[1] = (short) hourOfDay;

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        ModbusReq.getInstance().writeRegisters(onRequestBackWriteRegisters,
                device_address, 2049, ar);

        pos = -1;
        dialogOnFlag = false;
    }

    @Override
    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
        int weekdayNum;
        short[] ar = new short[4];

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        String weekday = DateFormat.format("EE", new Date(year, month, dayOfMonth)).toString();
        for (int i = 0; i < wd_rus.length; i++) {
            if (weekday.equalsIgnoreCase(wd_rus[i])) {
                weekdayNum = i-1;

                ar[0] = (short) weekdayNum;
                ar[1] = (short) dayOfMonth;
                ar[2] = (short) (month + 1);
                ar[3] = (short) (year - 2000);

                ModbusReq.getInstance().writeRegisters(onRequestBackWriteRegisters,
                        device_address, 2051, ar);

                break;
            }
        }

        pos = -1;
        dialogOnFlag = false;
    }

    @Override
    public void applyNewTimeProgram(TimeProgram tp) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (tp.getSec_on() != 65535) {
            if (tp.getSec_on() < 0 || tp.getSec_on() > 59) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            if (tp.getSec_off() < 0 || tp.getSec_off() > 59) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            if (tp.getMin_on() < 0 || tp.getMin_on() > 59) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            if (tp.getMin_off() < 0 || tp.getMin_off() > 59) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            if (tp.getHour_on() < 0 || tp.getHour_on() > 23) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            if (tp.getHour_off() < 0 || tp.getHour_off() > 23) {
                Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
                pos = -1;
                dialogOnFlag = false;
                return;
            }

            short[] ar = new short[8];

            if (pos == 3 || pos == 4 || pos == 5)
                pos -= 3;
            else
                pos -= 4;

            ar[0] = (short) tp.getSec_on();
            ar[1] = (short) tp.getMin_on();
            ar[2] = (short) tp.getHour_on();
            ar[3] = (short) tp.getSec_off();
            ar[4] = (short) tp.getMin_off();
            ar[5] = (short) tp.getHour_off();
            ar[6] = (short) tp.getWeekdays();
            ar[7] = (short) (tp.isEnabled() ? 1 : 0);

            ModbusReq.getInstance().writeRegisters(onRequestBackWriteRegisters,
                    device_address, 3712 + pos*16, ar);
        }

        pos = -1;
        dialogOnFlag = false;
    }

    @Override
    public void applyNewSystemName(String newName) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (!newName.isEmpty()) {

            short[] ar = new short[20];

            for (int i = newName.length(); i < 20; i++)
                newName += " ";

            symbolArray = EncodingUtils.getBytes(newName, "windows-1251");

            for (int i = 0; i < symbolArray.length; i++) {
                ar[i] = (short) symbolArray[i];
            }

            ar[19] = 0;

            ModbusReq.getInstance().writeRegisters(onRequestBackWriteRegisters,
                    device_address, 0x0810, ar);
        }

        pos = -1;
        dialogOnFlag = false;
    }

    @Override
    public void applyNewWeekday(int newWeekday) {

        /*if (appMode == 2) {
            pos = -1;
            dialogOnFlag = false;
            return;
        }*/

        if (newWeekday != -999) {
            ModbusReq.getInstance().writeRegister(onRequestBackWriteRegister,
                    device_address, 2051, newWeekday);
        } else {
            Toast.makeText(this, "Некорректное значение", Toast.LENGTH_SHORT).show();
        }

        pos = -1;
        dialogOnFlag = false;
    }
}
